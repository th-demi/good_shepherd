Directory Structure:
.
├── README.md
├── code.sh
├── components.json
├── jsconfig.json
├── next.config.mjs
├── package.json
├── postcss.config.mjs
├── src
│   ├── app
│   │   ├── components
│   │   │   ├── AcademyGuideBlock.jsx
│   │   │   ├── ActiveSlider.jsx
│   │   │   ├── AdmissionDetails.jsx
│   │   │   ├── AdmissionsBlock.jsx
│   │   │   ├── AlumniBlock.jsx
│   │   │   ├── EventCarousel.jsx
│   │   │   ├── ExamSlider.jsx
│   │   │   ├── ExamsBlock.jsx
│   │   │   ├── FooterBottom.jsx
│   │   │   ├── FooterTop.jsx
│   │   │   ├── FutureOfMusicBlock.jsx
│   │   │   ├── Header.jsx
│   │   │   ├── Icons.jsx
│   │   │   ├── IntroKeylineBlock.jsx
│   │   │   ├── MainNavigation.jsx
│   │   │   ├── MusicRegistrationForm.jsx
│   │   │   ├── RecitalBlock.jsx
│   │   │   ├── ReviewsBlock.jsx
│   │   │   ├── ScrollUpButton.jsx
│   │   │   ├── StudentLifeBlock.jsx
│   │   │   └── TeachersandtutorsBlock.jsx
│   │   ├── fonts
│   │   ├── globals.css
│   │   ├── layout.js
│   │   ├── login
│   │   │   └── page.jsx
│   │   └── page.js
│   ├── components
│   │   └── ui
│   │       ├── ImageCarousel.jsx
│   │       ├── back-button.jsx
│   │       ├── button.jsx
│   │       ├── card.jsx
│   │       ├── checkbox.jsx
│   │       ├── dialog.jsx
│   │       ├── doodle-background.jsx
│   │       ├── form.jsx
│   │       ├── input.jsx
│   │       ├── label.jsx
│   │       ├── phone-input.jsx
│   │       ├── review-card.jsx
│   │       ├── scroll-area.jsx
│   │       ├── select.jsx
│   │       ├── separator.jsx
│   │       └── table.jsx
│   ├── context
│   │   └── AuthContext.js
│   ├── data
│   │   ├── examBoards.js
│   │   ├── reviews.js
│   │   └── schools.js
│   ├── lib
│   │   └── utils.js
│   └── pages
│       ├── about-us.jsx
│       ├── api
│       │   ├── createOrder.js
│       │   ├── getAdmissions.js
│       │   ├── register.js
│       │   ├── results.js
│       │   └── storePayment.js
│       ├── cancellations-and-refunds.jsx
│       ├── contact-us.jsx
│       ├── exams.jsx
│       ├── payment.jsx
│       ├── privacy-policy.jsx
│       ├── results.jsx
│       └── terms-and-conditions.jsx
└── tailwind.config.js

13 directories, 67 files
-e 


File Contents:
File: ./jsconfig.json
===================
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
-e 


File: ./tailwind.config.js
===================
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ["class"],
    content: [
        "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
        "./src/pages/*.{js,ts,jsx,tsx,mdx}",
        "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
        "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
        "*.{js,ts,jsx,tsx,mdx}", // Added from second config
    ],
    theme: {
        container: { // Added from second config
            center: true,
            padding: "2rem",
            screens: {
                "2xl": "1400px",
            },
        },
        extend: {
            colors: {
                background: 'hsl(var(--background))',
                foreground: 'hsl(var(--foreground))',
                'custom-red': '#f92d44', // Keeping your custom red
                card: {
                    DEFAULT: 'hsl(var(--card))',
                    foreground: 'hsl(var(--card-foreground))'
                },
                popover: {
                    DEFAULT: 'hsl(var(--popover))',
                    foreground: 'hsl(var(--popover-foreground))'
                },
                primary: {
                    DEFAULT: 'hsl(var(--primary))',
                    foreground: 'hsl(var(--primary-foreground))'
                },
                secondary: {
                    DEFAULT: 'hsl(var(--secondary))',
                    foreground: 'hsl(var(--secondary-foreground))'
                },
                muted: {
                    DEFAULT: 'hsl(var(--muted))',
                    foreground: 'hsl(var(--muted-foreground))'
                },
                accent: {
                    DEFAULT: 'hsl(var(--accent))',
                    foreground: 'hsl(var(--accent-foreground))'
                },
                destructive: {
                    DEFAULT: 'hsl(var(--destructive))',
                    foreground: 'hsl(var(--destructive-foreground))'
                },
                border: 'hsl(var(--border))',
                input: 'hsl(var(--input))',
                ring: 'hsl(var(--ring))',
                chart: {
                    '1': 'hsl(var(--chart-1))',
                    '2': 'hsl(var(--chart-2))',
                    '3': 'hsl(var(--chart-3))',
                    '4': 'hsl(var(--chart-4))',
                    '5': 'hsl(var(--chart-5))'
                }
            },
            borderRadius: {
                lg: 'var(--radius)',
                md: 'calc(var(--radius) - 2px)',
                sm: 'calc(var(--radius) - 4px)'
            },
            height: {
                '0.25': '0.75px', // Keeping your custom height
            },
            keyframes: { // Added from second config
                "accordion-down": {
                    from: { height: 0 },
                    to: { height: "var(--radix-accordion-content-height)" },
                },
                "accordion-up": {
                    from: { height: "var(--radix-accordion-content-height)" },
                    to: { height: 0 },
                },
            },
            animation: { // Added from second config
                "accordion-down": "accordion-down 0.2s ease-out",
                "accordion-up": "accordion-up 0.2s ease-out",
            },
        }
    },
    plugins: [require("tailwindcss-animate")],
};-e 


File: ./postcss.config.mjs
===================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
-e 


File: ./next.config.mjs
===================
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'supercool-ram.transforms.svdcdn.com',
      },
    ],
  },
};

export default nextConfig;-e 


File: ./README.md
===================
-e 


File: ./package.json
===================
{
  "name": "good_shepherd",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.1",
    "axios": "^1.7.9",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.5.2",
    "framer-motion": "^12.0.6",
    "google-auth-library": "^9.15.1",
    "googleapis": "^144.0.0",
    "lucide-react": "^0.472.0",
    "mongodb": "^6.12.0",
    "next": "15.1.4",
    "qrcode": "^1.5.4",
    "razorpay": "^2.9.5",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106",
    "react-hook-form": "^7.54.2",
    "react-phone-input-2": "^2.15.1",
    "react-phone-number-input": "^3.4.11",
    "sonner": "^1.7.2",
    "swiper": "^11.2.1",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "xlsx": "^0.18.5",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "postcss": "^8",
    "shadcn-ui": "^0.9.4",
    "tailwindcss": "^3.4.1"
  }
}
-e 


File: ./components.json
===================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}-e 


File: ./code.sh
===================
OUTPUT_FILE="code.txt"
> $OUTPUT_FILE
echo "Directory Structure:" >> $OUTPUT_FILE
tree -I '.next|node_modules|.env.local|pnpm-lock.yaml|code.txt|public|.git|favicon.ico|GeistMonoVF.woff|GeistVF.woff|.DS_Store|src/.DS_Store' >> $OUTPUT_FILE
echo -e "\n\n" >> $OUTPUT_FILE
echo "File Contents:" >> $OUTPUT_FILE
find . -type f ! -path './node_modules*' ! -path './.next*' ! -name '.env.local' ! -name 'pnpm-lock.yaml' ! -name 'code.txt' ! -path './public*' ! -path './.git*' ! -path './src/app/favicon.ico' ! -path './src/app/fonts/GeistMonoVF.woff' ! -path './src/app/fonts/GeistVF.woff' ! -path './.DS_Store' ! -path './src/.DS_Store' | while read file; do
    if [ -f "$file" ]; then
        echo "File: $file" >> $OUTPUT_FILE
        echo "===================" >> $OUTPUT_FILE
        cat "$file" >> $OUTPUT_FILE
        echo -e "\n\n" >> $OUTPUT_FILE
    fi
done

echo "Code saved to $OUTPUT_FILE"
-e 


File: ./src/context/AuthContext.js
===================
'use client';
import { createContext, useContext, useState } from 'react';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  return (
    <AuthContext.Provider value={{ isLoggedIn, setIsLoggedIn }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;-e 


File: ./src/app/layout.js
===================
import localFont from "next/font/local";
import "./globals.css";
import { Toaster } from "sonner";
import { AuthProvider } from "@/context/AuthContext";

export const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

export const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "GSIM",
  description: "Good Shepherd Institute Of Music",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={`${geistSans.variable} ${geistMono.variable}`}>
      <body className="antialiased">
        <AuthProvider>
          {children}
          <Toaster />
        </AuthProvider>
      </body>
    </html>
  );
}-e 


File: ./src/app/page.js
===================
// pages/index.js
import Header from "./components/Header";
import MainNavigation from "./components/MainNavigation";
import IntroKeylineBlock from "./components/IntroKeylineBlock";
import RecitalBlock from "./components/RecitalBlock";
import AcademyGuideBlock from "./components/AcademyGuideBlock";
import AdmissionsBlock from "./components/AdmissionsBlock";
import ExamsBlock from "./components/ExamsBlock";
import TeachersandtutorsBlock from "./components/TeachersandtutorsBlock";
import ReviewsBlock from "./components/ReviewsBlock";
import AdmissionsDetails from "./components/AdmissionDetails";
import FooterTop from "./components/FooterTop";
import FooterBottom from "./components/FooterBottom";
import ScrollUpButton from "./components/ScrollUpButton";
export default function Home() {
  return (
    <div>
      <div className="relative z-9999">
        <MainNavigation />
        <Header />
      </div>
      <main className="box-border">
        <IntroKeylineBlock />
        <AcademyGuideBlock />
        <RecitalBlock />
        <ExamsBlock />
        <TeachersandtutorsBlock />
        <ReviewsBlock />
        <AdmissionsBlock />
      </main>
      <ScrollUpButton />
      <footer>
        <FooterTop />
        <FooterBottom />
      </footer>
    </div>
    // 
  );
}-e 


File: ./src/app/components/Header.jsx
===================
export default function Header() {
    return (
      <header className="relative w-full h-screen">
        <video playsInline autoPlay muted loop aria-hidden="true" className="object-cover w-full h-full z-0">
          <source src="/GSIM_bg_video.mp4" type="video/mp4" />
        </video>
      </header>
    );
  }

// id = "layer-site" = main navbar
// id = "layer-nav" = options
// class = "headder search" = search bar-e 


File: ./src/app/components/Icons.jsx
===================
// components/Icons.js

export const LoginIcon = () => (
  <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg" className="icon icon--login icon--svg">
    <path d="M8.29183 7.66667C10.1328 7.66667 11.6252 6.17428 11.6252 4.33333C11.6252 2.49238 10.1328 1 8.29183 1C6.45088 1 4.9585 2.49238 4.9585 4.33333C4.9585 6.17428 6.45088 7.66667 8.29183 7.66667Z" stroke="#FFF" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="login-top" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="20.946958541870117"></path>
    <path d="M14.9583 16V14.3333C14.9583 13.4493 14.6071 12.6014 13.982 11.9763C13.3569 11.3512 12.5091 11 11.625 11H4.95833C4.07428 11 3.22643 11.3512 2.60131 11.9763C1.97619 12.6014 1.625 13.4493 1.625 14.3333V16" stroke="#FFF" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="login-bottom" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="20.471994400024414"></path>
  </svg>
);

export const BasketIcon = () => (
  <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg" className="icon icon--basket icon--svg">
    <path fillRule="evenodd" clipRule="evenodd" d="M3.16683 7.12509H4.74999C4.75022 7.41527 4.91057 7.69457 5.18778 7.83318C5.57885 8.02871 6.05438 7.8702 6.24992 7.47914L6.42694 7.12509H12.5734L12.7504 7.47914C12.9459 7.8702 13.4215 8.02871 13.8125 7.83318C14.0898 7.69457 14.2501 7.41527 14.2503 7.12509H15.8335V8.70843H3.16683V7.12509ZM13.5519 5.54176H15.8335C16.7079 5.54176 17.4168 6.25064 17.4168 7.12509V8.70842C17.4168 9.37344 17.0068 9.9427 16.4258 10.1772C16.4285 10.2151 16.4299 10.2532 16.4299 10.2918C16.4299 10.4073 16.4173 10.5225 16.3922 10.6352L15.1607 16.1769C14.9998 16.9013 14.3572 17.4168 13.6151 17.4168H5.38522C4.64311 17.4168 4.00057 16.9013 3.83959 16.1769L2.6081 10.6352C2.57383 10.481 2.56332 10.327 2.57414 10.1771C1.99332 9.94248 1.5835 9.37331 1.5835 8.70842V7.12509C1.5835 6.25064 2.29238 5.54176 3.16683 5.54176H5.44839L7.20874 2.02105C7.40427 1.62998 7.87981 1.47147 8.27087 1.667C8.66194 1.86254 8.82045 2.33807 8.62492 2.72914L7.21861 5.54176H11.7817L10.3754 2.72914C10.1799 2.33807 10.3384 1.86254 10.7295 1.667C11.1205 1.47147 11.5961 1.62998 11.7916 2.02105L13.5519 5.54176ZM5.38522 15.8334L4.15373 10.2918H14.8466L13.6151 15.8334H5.38522Z" fill="#FFF" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="125.4071273803711"></path>
  </svg>
);

export const PlayPauseIcon = () => (
  <div className="pause">
    <div className="icon--bar"></div>
    <div className="icon--bar"></div>
  </div>
);

export const MuteUnmuteIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43.34 59.53" className="icon icon--svg icon--audio">
    <defs></defs>
    <g>
      <path stroke="currentColor" d="M1.67,18.89A13.94,13.94,0,0,1,6.75,29.65,13.92,13.92,0,0,1,1.67,40.41" className="cls-1" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="24.58820152282715"></path>
      <path stroke="currentColor" d="M15.27,10.16A26,26,0,0,1,24,29.53a26,26,0,0,1-8.91,19.52" className="cls-1" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="44.00544738769531"></path>
      <path stroke="currentColor" d="M28.8,1.47A38.49,38.49,0,0,1,41.2,29.81,38.52,38.52,0,0,1,29,58" className="cls-1" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="63.42880630493164"></path>
    </g>
  </svg>
);

export const SearchIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="61" height="62" viewBox="0 0 61 62" className="icon icon--search icon--svg">
    <g fill="none" fillRule="evenodd" stroke="currentColor" strokeWidth="6" transform="translate(2 2)">
      <path d="M43.1000046,22.38 C43.104045,31.0728025 37.8707401,38.9119049 29.8407984,42.2412996 C21.8108568,45.5706943 12.5659849,43.7345703 6.41781437,37.5892607 C0.26964379,31.443951 -1.57078297,22.1999348 1.75487393,14.1684444 C5.08053084,6.13695401 12.9171965,0.9 21.61,0.9 C33.4746951,0.9 43.094479,10.5153062 43.1000046,22.38 Z" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="135.03297424316406"></path>
      <path d="M36.46,37.9 L57,58.43" style={{ opacity: 1, strokeDashoffset: '0px' }} strokeDasharray="29.040876388549805"></path>
    </g>
  </svg>
);

export const BurgerIcon = () => (
  <div className="icon--burger">
    <div className="icon--burger-top"></div>
    <div className="icon--burger-bottom"></div>
  </div>
);
-e 


File: ./src/app/components/EventCarousel.jsx
===================
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { ChevronLeft, ChevronRight, X } from "lucide-react";

const EventCarousel = ({ isOpen, onClose }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  
  // Example events data - replace with your actual events data
  const events = [
    {
      type: 'image',
      src: '/events/recital_gathering.HEIC',
      title: 'Symphony Orchestra Concert',
      description: 'A magnificent performance of Beethoven\'s 9th Symphony'
    },
    {
      type: 'image',
      src: '/events/recital_orchestration.heic',
      title: 'Chamber Music Series',
      description: 'Intimate performances by our talented chamber groups'
    },
    {
        type: 'image',
        src: '/events/recital_picture.HEIC',
        title: 'Chamber Music Series',
        description: 'Intimate performances by our talented chamber groups'
    },
    {
        type: 'image',
        src: '/events/recital_practice.HEIC',
        title: 'Chamber Music Series',
        description: 'Intimate performances by our talented chamber groups'
    },
    {
        type: 'image',
        src: '/events/recital_violins.heic',
        title: 'Chamber Music Series',
        description: 'Intimate performances by our talented chamber groups'
    },
    // {
    //   type: 'video',
    //   src: '/events/jazz-ensemble.mp4',
    //   title: 'Jazz Ensemble Night',
    //   description: 'An evening of classic and contemporary jazz'
    // }
  ];

  const nextSlide = () => {
    setCurrentIndex((prev) => (prev + 1) % events.length);
  };

  const prevSlide = () => {
    setCurrentIndex((prev) => (prev - 1 + events.length) % events.length);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl w-full bg-black text-white border border-white/20">
        <DialogHeader>
          <DialogTitle className="text-2xl font-thin">Spring Season Highlights</DialogTitle>
          <button
            onClick={onClose}
            className="absolute right-4 top-4 text-white/70 hover:text-white transition-colors"
          >
            <X className="w-6 h-6" />
          </button>
        </DialogHeader>
        
        <div className="relative aspect-video mt-4">
          {/* Main content */}
          <div className="relative w-full h-full overflow-hidden">
            {events.map((event, index) => (
              <div
                key={index}
                className={`absolute w-full h-full transition-all duration-500 ease-out transform ${
                  index === currentIndex 
                    ? 'translate-x-0 opacity-100' 
                    : index < currentIndex 
                    ? '-translate-x-full opacity-0' 
                    : 'translate-x-full opacity-0'
                }`}
              >
                {event.type === 'image' ? (
                  <img
                    src={event.src}
                    alt={event.title}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <video
                    src={event.src}
                    className="w-full h-full object-cover"
                    controls
                  />
                )}
              </div>
            ))}
          </div>

          {/* Navigation arrows */}
          <button
            onClick={prevSlide}
            className="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 p-2 rounded-full hover:bg-black/70 transition-colors"
          >
            <ChevronLeft className="w-6 h-6 text-white" />
          </button>
          <button
            onClick={nextSlide}
            className="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 p-2 rounded-full hover:bg-black/70 transition-colors"
          >
            <ChevronRight className="w-6 h-6 text-white" />
          </button>

          {/* Caption */}
          <div className="absolute bottom-0 left-0 right-0 bg-black/70 p-4">
            <h3 className="text-xl font-thin mb-2">{events[currentIndex].title}</h3>
            <p className="text-white/80">{events[currentIndex].description}</p>
          </div>

          {/* Dots indicator */}
          <div className="absolute bottom-20 left-1/2 -translate-x-1/2 flex gap-2">
            {events.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentIndex(index)}
                className={`w-2 h-2 rounded-full transition-colors ${
                  index === currentIndex ? 'bg-white' : 'bg-white/30'
                }`}
              />
            ))}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default EventCarousel;-e 


File: ./src/app/components/ExamsBlock.jsx
===================
"use client";
import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import ExamSlider from './ExamSlider';

const ChevronIcon = () => (
  <svg viewBox="0 0 18 18" className="w-4 h-4 text-white">
    <polygon
      fillRule="evenodd"
      fill="currentColor"
      stroke="currentColor"
      strokeWidth=".5"
      points="0 .682 6.635 3.999 0 7.317 0 8 8 3.999 0 0"
      transform="translate(5 5)"
    />
  </svg>
);

// New glowing "New" badge component
const NewBadge = () => (
  <div className="relative inline-flex items-center ml-2">
    <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-white/50 opacity-75"></span>
    <span className="relative inline-flex rounded-full h-2.5 w-2.5 bg-white animate-pulse"></span>
    <span className="ml-1 text-xs font-bold text-white uppercase">New</span>
  </div>
);

const ExamsBlock = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [isSliderOpen, setIsSliderOpen] = useState(false);
  
  const handleOpenSlider = (e) => {
    e.preventDefault();
    setIsSliderOpen(true);
    // Prevent body scrolling when modal is open
    document.body.style.overflow = 'hidden';
  };

  // Handle closing the slider
  const handleCloseSlider = () => {
    setIsSliderOpen(false);
    // Restore body scrolling
    document.body.style.overflow = 'unset';
  };

  return (
    <section className="bg-custom-red py-12">
      <div className="container mx-auto px-4">
        {/* Mobile/Tablet Header */}
        <div className="lg:hidden mb-8">
          <div className="md:ml-[8.33%] md:w-1/2">
            <h2 className="text-4xl font-thin mb-6 text-white">
              INTERNATIONAL EXAM BOARDS
            </h2>
          </div>
          <div className="hidden md:block md:ml-[8.33%] md:w-[83.33%]">
            <hr className="border-t border-gray-300" />
          </div>
        </div>

        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
          {/* Image Section */}
          <div className="md:ml-[8.33%] lg:ml-0 md:w-5/12">
            <div className="relative aspect-[4/3] w-full">
              <Image
                src="/student-life-strings.jpeg"
                alt="String students look over the shoulder of a piano accompanist"
                fill
                className="object-cover filter grayscale"
                sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 40vw"
              />
            </div>
          </div>

          {/* Content Section */}
          <div className="md:ml-[8.33%] lg:ml-[16.67%] md:w-5/12 mt-8 lg:mt-0 text-white">
            <div className="pr-4 lg:pr-24">
              {/* Desktop Header */}
              <h2 className="hidden lg:block text-6xl font-thin mb-6">
                INTERNATIONAL EXAM BOARDS
              </h2>

              {/* Content */}
              <div className="hidden md:block">
                <div className="prose max-w-none mb-6">
                  <p>
                    We offer exams from ABRSM, LCM, MTB, and RSL, providing students with the opportunity to earn recognized certifications in music performance and theory, as part of their learning journey.
                  </p>
                </div>
                <ul className="space-y-4">
                <li>
                  <Link href="/exams" className="group flex items-center text-white hover:text-white">
                    <div className="relative inline-block">
                      <span className="mr-2">Learn About Our Exam Partnerships</span>
                      {/* Underline effect */}
                      <span className="absolute bottom-0 left-0 w-0 h-px bg-white transition-all duration-300 group-hover:w-full"></span>
                    </div>
                    <ChevronIcon />
                  </Link>
                </li>
                <li>
                  <Link href="/results" className="group flex items-center text-white hover:text-white">
                    <div className="relative inline-block">
                      <span className="mr-2">Check out Exam Results</span>
                      {/* Underline effect */}
                      <span className="absolute bottom-0 left-0 w-0 h-px bg-white transition-all duration-300 group-hover:w-full"></span>
                    </div>
                    <ChevronIcon />
                    <NewBadge />
                  </Link>
                </li>
                <li>
                  <button
                    onClick={handleOpenSlider}
                    className="group inline-flex items-center text-white hover:text-white transition-colors relative"
                  >
                    <div className="relative inline-block">
                      <span className="mr-2">See our Examination gallery</span>
                      {/* Underline effect */}
                      <span className="absolute bottom-0 left-0 w-0 h-0.25 bg-white transition-all duration-300 group-hover:w-full inline-block"></span>
                    </div>
                    <div className="transform transition-transform group-hover:translate-x-1">
                      <svg viewBox="0 0 18 18" className="w-4 h-4 text-white group-hover:hidden">
                        <polygon
                          fillRule="evenodd"
                          fill="currentColor"
                          stroke="currentColor"
                          strokeWidth=".5"
                          points="0 .682 6.635 3.999 0 7.317 0 8 8 3.999 0 0"
                          transform="translate(5 5)"
                        />
                      </svg>
                    </div>
                  </button>
                </li>
              </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Mobile Content */}
        <div className="block md:hidden mt-8">
          <div className="prose max-w-none mb-6 text-white">
            <p>
              We offer exams from ABRSM, LCM, MTB, and RSL, providing students with the opportunity to earn recognized certifications in music performance and theory, as part of their learning journey.
            </p>
          </div>
          <ul className="space-y-4">
          <li>
            <Link href="/exams" className="group flex items-center text-white hover:text-white">
              <div className="relative inline-block">
                <span className="mr-2">Learn About Our Exam Partnerships</span>
                {/* Underline effect */}
                <span className="absolute bottom-0 left-0 w-0 h-px bg-white transition-all duration-300 group-hover:w-full"></span>
              </div>
              <ChevronIcon />
            </Link>
          </li>
          <li>
            <Link href="/results" className="group flex items-center text-white hover:text-white">
              <div className="relative inline-block">
                <span className="mr-2">Check out Exam Results</span>
                {/* Underline effect */}
                <span className="absolute bottom-0 left-0 w-0 h-px bg-white transition-all duration-300 group-hover:w-full"></span>
              </div>
              <ChevronIcon />
              <NewBadge />
            </Link>
          </li>
          <li>
            <button
              onClick={handleOpenSlider}
              className="group inline-flex items-center text-white hover:text-white transition-colors relative"
            >
              <div className="relative inline-block">
                <span className="mr-2">SEE OUR RECITAL EVENTS</span>
                {/* Underline effect */}
                <span className="absolute bottom-0 left-0 w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full inline-block"></span>
              </div>
              <div className="transform transition-transform group-hover:translate-x-1">
                <svg viewBox="0 0 18 18" className="w-4 h-4 text-white group-hover:hidden">
                  <polygon
                    fillRule="evenodd"
                    fill="currentColor"
                    stroke="currentColor"
                    strokeWidth=".5"
                    points="0 .682 6.635 3.999 0 7.317 0 8 8 3.999 0 0"
                    transform="translate(5 5)"
                  />
                </svg>
              </div>
            </button>
          </li>
        </ul>
        </div>
        {isSliderOpen && (
          <div className="fixed inset-0 z-50">
            {/* Backdrop */}
            <div
              className="absolute inset-0 bg-black/50 backdrop-blur-sm"
              onClick={handleCloseSlider}
            ></div>
            
            {/* Modal Content */}
            <div className="relative z-10 w-full h-full">
              <ExamSlider onClose={handleCloseSlider} />
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default ExamsBlock;-e 


File: ./src/app/components/ScrollUpButton.jsx
===================
"use client";
import { useState, useEffect } from "react";
import { ChevronUp } from "lucide-react";

const ScrollUpButton = () => {
  const [showButton, setShowButton] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > window.innerHeight * 0.25) {
        setShowButton(true);
      } else {
        setShowButton(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  return (
    <button
      onClick={scrollToTop}
      className={`fixed bottom-6 right-6 p-2 rounded-full
        bg-black/10 backdrop-blur-sm border border-white/20
        hover:bg-black/20 transition-all duration-300 group
        ${showButton 
          ? 'translate-y-0 opacity-100 visible'
          : 'translate-y-4 opacity-0 invisible'
        }`}
      aria-label="Scroll to top"
    >
      <ChevronUp 
        className="w-4 h-4 text-white transition-transform duration-300
          group-hover:scale-110 group-hover:-translate-y-0.5
          group-active:scale-95 group-active:translate-y-0" 
      />
    </button>
  );
};

export default ScrollUpButton;-e 


File: ./src/app/components/StudentLifeBlock.jsx
===================
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';

const ChevronArrow = () => (
  <svg viewBox="0 0 18 18" className="w-4 h-4">
    <polygon 
      fillRule="evenodd" 
      stroke="currentColor" 
      fill="currentColor" 
      strokeWidth=".5" 
      points="0 .682 6.635 3.999 0 7.317 0 8 8 3.999 0 0" 
      transform="translate(5 5)"
    />
  </svg>
);

const StudentLifeBlock = () => {
  return (
    <div className="container mx-auto px-4">
      <div className="row">
        <div className="col-12 mt-20 lg:mt-0">
          <h2 className="text-6xl md:text-8xl font-display mb-8">
            Student Life
          </h2>
        </div>
      </div>
      
      <div className="flex flex-col lg:flex-row">
        <div className="lg:w-1/4">
          <div>
            <div className="bg-white p-6">
              <div className="prose">
                <p>
                  When you come to the Academy, you will form lifelong friendships with people from around the world.
                </p>
              </div>
              
              <Link href="/student-life" className="inline-flex items-center mt-4 text-sm hover:underline">
                <span>Explore Student Life</span>
                <span className="ml-2">
                  <ChevronArrow />
                </span>
              </Link>
            </div>

            <div className="block lg:hidden mt-6">
              <Image
                src="https://supercool-ram.transforms.svdcdn.com/production/200731-COMM-WEBS-StudentLifeImage-1_2020-08-19-151828.jpg"
                alt="A student carries a cello case into the entrance of the Academy"
                width={960}
                height={640}
                className="w-full"
              />
            </div>

            <div className="bg-black text-white p-6 mt-6">
              <div className="space-y-4">
                <Link href="/student-life/living-in-london" className="block hover:underline">
                  Living in London
                </Link>
                <Link href="/student-life/health-wellbeing" className="block hover:underline">
                  Health and wellbeing
                </Link>
                <Link href="/student-life/term-dates" className="block hover:underline">
                  Term dates
                </Link>
              </div>
            </div>
          </div>
        </div>

        <div className="hidden lg:block lg:w-3/4 pl-6">
          <Image
            src="https://supercool-ram.transforms.svdcdn.com/production/200731-COMM-WEBS-StudentLifeImage-1_2020-08-19-151828.jpg"
            alt="A student carries a cello case into the entrance of the Academy"
            width={960}
            height={640}
            className="w-full h-full object-cover"
          />
        </div>
      </div>
    </div>
  );
};

export default StudentLifeBlock;-e 


File: ./src/app/components/AdmissionDetails.jsx
===================
'use client';
import React from 'react';
import { format } from 'date-fns';
import { Loader2 } from 'lucide-react';

const AdmissionsDetails = () => {
  const [admissionsData, setAdmissionsData] = React.useState([]);
  const [selectedStudent, setSelectedStudent] = React.useState(null);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState(null);
  const [showDetails, setShowDetails] = React.useState(false);

  React.useEffect(() => {
    const fetchAdmissions = async () => {
      try {
        const response = await fetch('/api/getAdmissions');
        const data = await response.json();
        
        if (response.ok) {
          setAdmissionsData(data.data);
        } else {
          throw new Error(data.error || 'Failed to fetch data.');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAdmissions();
  }, []);

  const handleStudentSelect = (student) => {
    setShowDetails(false);
    setSelectedStudent(student);
    setTimeout(() => setShowDetails(true), 300);
  };

  const formatDate = React.useCallback((dateString) => {
    const date = new Date(dateString);
    return format(date, 'MMM dd, yyyy');
  }, []);

  if (error) {
    return (
      <div className="flex h-[calc(100vh-12rem)] items-center justify-center">
        <div className="text-red-500 bg-red-50 px-4 py-3 rounded-lg shadow animate-bounce">
          {error}
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col lg:flex-row h-[calc(100vh-12rem)] bg-gradient-to-br from-gray-50 to-white rounded-xl overflow-hidden shadow-2xl transition-all duration-500">
      {/* Left Column - Names List */}
      <div className="w-full lg:w-96 border-b lg:border-b-0 lg:border-r border-gray-200 bg-white/80 backdrop-blur-sm">
        <div className="sticky top-0 bg-white/90 backdrop-blur-md z-10 p-4 border-b border-gray-200">
          <h2 className="text-xl font-bold">
            Admissions
          </h2>
        </div>        
        <div className="divide-y divide-gray-100 max-h-[calc(100vh-16rem)] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent">
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
            </div>
          ) : admissionsData.length === 0 ? (
            <div className="text-center py-8 text-gray-500">No admissions found</div>
          ) : (
            admissionsData.map((student, index) => (
              <div
                key={student._id}
                className="transform transition-all duration-300"
                style={{ 
                  animationDelay: `${index * 50}ms`,
                  opacity: 0,
                  animation: 'fadeSlideIn 0.5s ease forwards'
                }}
              >
                <button
                  onClick={() => handleStudentSelect(student)}
                  className={`w-full text-left px-6 py-4 transition-all duration-300 
                    ${selectedStudent?._id === student._id 
                      ? 'bg-gray-100 border-l-4 border-blue-500 shadow-inner' 
                      : 'hover:bg-gray-50'}`}
                >
                  <p className={`text-sm font-semibold transition-colors duration-300`}>
                    {student.Name}
                  </p>
                  <p className={`text-xs mt-1 transition-colors duration-300`}>
                    {student['Type of Musical Instrument']}
                  </p>
                </button>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Right Column - Details View */}
      <div className="flex-1 overflow-y-auto bg-white/80 backdrop-blur-sm">
        {selectedStudent ? (
          <div 
            className={`p-6 max-h-[calc(100vh-16rem)] overflow-y-auto transition-all duration-500 transform
              ${showDetails ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}
          >
            <div className="mb-8 space-y-2">
              <h1 className="text-3xl font-bold text-gray-900">{selectedStudent.Name}</h1>
              <p className="text-sm text-gray-500">
                Admitted on {formatDate(selectedStudent.createdAt)}
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {[
                { label: "Activity Status", value: selectedStudent['Activity Status'] },
                { label: "Gender", value: selectedStudent.Gender },
                { label: "School/College/Occupation", value: selectedStudent['School / College / Occupation'] },
                { label: "Musical Instrument", value: selectedStudent['Type of Musical Instrument'] },
                { label: "Email", value: selectedStudent['E - mail'], type: "email" },
                { label: "Phone", value: selectedStudent['Phone number'], type: "phone" },
                { label: "Address", value: selectedStudent['Residence Address'] },
                { label: "Date of Birth", value: formatDate(selectedStudent['Date of Birth']) }
              ].map((detail, index) => (
                <div
                  key={detail.label}
                  className="transform transition-all duration-500"
                  style={{ 
                    animationDelay: `${showDetails ? (index * 100) + 200 : 0}ms`,
                    opacity: 0,
                    animation: showDetails ? 'fadeSlideUp 0.5s ease forwards' : 'none'
                  }}
                >
                  <DetailCard {...detail} />
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div className="h-full flex items-center justify-center text-gray-500">
            <p className="text-lg animate-pulse">Select a student to view details</p>
          </div>
        )}
      </div>

      <style jsx>{`
        @keyframes fadeSlideIn {
          from {
            opacity: 0;
            transform: translateX(-20px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
        
        @keyframes fadeSlideUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
};

const DetailCard = ({ label, value, type }) => {
  const renderValue = () => {
    if (type === 'email') {
      return (
        <a href={`mailto:${value}`} className="text-blue-600 hover:text-blue-700 hover:underline">
          {value}
        </a>
      );
    }
    if (type === 'phone') {
      return (
        <a href={`tel:${value}`} className="text-blue-600 hover:text-blue-700 hover:underline">
          {value}
        </a>
      );
    }
    return value;
  };

  return (
    <div className="group bg-white p-4 rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-1 border border-gray-100 hover:border-blue-100">
      <dt className="text-sm font-medium text-gray-500 group-hover:text-blue-600 transition-colors duration-300">
        {label}
      </dt>
      <dd className="mt-2 text-sm text-gray-900 break-words">{renderValue()}</dd>
    </div>
  );
};

export default AdmissionsDetails;-e 


File: ./src/app/components/IntroKeylineBlock.jsx
===================
"use client";
import { useState, useEffect } from 'react';

export default function IntroKeylineBlock() {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      { threshold: 0.1 }
    );

    const element = document.querySelector('[data-intro-keyline]');
    if (element) {
      observer.observe(element);
    }

    return () => {
      if (element) {
        observer.unobserve(element);
      }
    };
  }, []);

  return (
    <div data-intro-keyline="" className="bg-custom-red text-white overflow-hidden relative">
      <div className="container mx-auto my-0 py-20">
        {/* Heading Row */}
        <div className="flex mb-0 md:mb-[10rem]">
          <div className="md:ml-[50%] lg:ml-[58.33%] md:w-[41.66%]">
            <h2 
              className={`text-4xl md:text-5xl lg:text-6xl font-thin transform transition-all duration-1000 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
              }`}
            >
              WHERE MUSIC EVOLVES
            </h2>
          </div>
        </div>

        {/* Content Row with SVG */}
        <div className="flex relative">
          <div className="md:ml-[8.33%] md:w-[41.66%] lg:w-[33.33%]">
            {/* SVG Path with animation */}
            <svg 
              viewBox="0 0 184 151" 
              preserveAspectRatio="none"
              className="w-80% h-[150px] absolute -top-[11rem] right-[46%] hidden md:block"
            >
              <path 
                fill="none" 
                fillRule="evenodd" 
                stroke="#FFF" 
                strokeWidth="1"
                d="M183.5,0.5 C98.373,0.5 29.489,35.596 0.5,150.5"
                className={`transition-all duration-1000 ${
                  isVisible ? 'stroke-dashoffset-0' : 'stroke-dashoffset-full'
                }`}
                style={{
                  strokeDasharray: '259.3521728515625',
                  strokeDashoffset: isVisible ? '0' : '259.3521728515625'
                }}
              />
            </svg>

            {/* Content with fade-in animation */}
            <div 
              className={`transform transition-all duration-1000 delay-500 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
              }`}
            >
              <div className="prose prose-invert max-w-none mt-8">
                <p className="text-lg">
                  A space for fearless artists to unite, innovate, and push boundaries. We blend tradition with tomorrow, shaping the sound of what’s next.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}-e 


File: ./src/app/components/ExamSlider.jsx
===================
"use client";
import React from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/swiper-bundle.css";
import { EffectCoverflow, Pagination, Navigation } from "swiper/modules";
import { X } from "lucide-react";

export default function ExamSldier({ onClose }) {
  const images = [
    "/exams/exam_1.JPG",
    "/exams/exam_2.JPG",
    "/exams/exam_3.jpg",
    "/exams/exam_4.jpg",
  ];

  return (
    <div className="h-full flex flex-col justify-center">
      <div className="max-w-7xl mx-auto px-4 w-full">
        <div className="flex justify-end mb-8">
          <button 
            onClick={onClose}
            className="text-white hover:text-gray-300 transition-colors"
            aria-label="Close slider"
          >
            <X size={24} />
          </button>
        </div>
        
        <Swiper
          modules={[EffectCoverflow, Pagination, Navigation]}
          effect="coverflow"
          grabCursor={true}
          centeredSlides={true}
          loop={true}
          slidesPerView={"auto"} // Automatically adjust slides per view
          spaceBetween={20} // Space between the slides
          breakpoints={{
            // For smaller screens, show fewer slides
            640: {
              slidesPerView: 1,
              centeredSlides: true,
            },
            768: {
              slidesPerView: 2,
              centeredSlides: true,
            },
            1024: {
              slidesPerView: 3,
              centeredSlides: true,
            },
          }}
          coverflowEffect={{
            rotate: 50,
            stretch: 0,
            depth: 100,
            modifier: 1,
            slideShadows: true,
          }}
          pagination={{
            type: "bullets",
            clickable: true,
          }}
          navigation={true}
          className="mySwiper"
        >
          {images.map((src, index) => (
            <SwiperSlide key={index} className="swiper-slide">
              <img
                src={src}
                alt={`Slide ${index + 1}`}
                className="w-full h-auto max-h-[400px] md:max-h-[500px] rounded-xl object-cover mx-auto"
              />
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </div>
  );
}
-e 


File: ./src/app/components/ReviewsBlock.jsx
===================
"use client";
import React, { useState, useEffect } from "react";
import { reviews } from "@/data/reviews";
import ReviewCard from "@/components/ui/review-card";

const ReviewsBlock = () => {
  const [currentReview, setCurrentReview] = useState(0);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      { threshold: 0.1 }
    );

    const elements = document.querySelectorAll('[data-intersect="once"]');
    elements.forEach((el) => observer.observe(el));

    return () => {
      elements.forEach((el) => observer.unobserve(el));
    };
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentReview((prev) => (prev + 1) % reviews.length);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="bg-custom-red text-black py-12 md:py-16">
      <div className="container mx-auto px-4">
        {/* Title - Appears first on mobile */}
        <div className="mb-8 md:hidden">
          <h2 className="text-4xl sm:text-5xl font-thin">
            WHAT OUR COMMUNITY SAYS
          </h2>
        </div>

        <div className="flex flex-col md:flex-row md:items-start md:justify-between md:gap-8 lg:gap-16">
          {/* Image Section */}
          <div className="w-full md:w-5/12 mb-8 md:mb-0 order-2 md:order-1">
            <div
              data-intersect="once"
              className={`transform transition-opacity duration-500 ${
                isVisible ? "opacity-100" : "opacity-0"
              }`}
            >
              <img
                src="/music_student.jpg"
                alt="Student playing music"
                className="w-full h-auto object-cover rounded-lg shadow-md"
              />
            </div>
          </div>

          {/* Reviews Section */}
          <div className="w-full md:w-6/12 order-3 md:order-2">
            <div
              data-intersect="once"
              className={`transform transition-transform duration-500 ${
                isVisible
                  ? "translate-y-0 opacity-100"
                  : "translate-y-4 opacity-0"
              }`}
            >
              <h2 className="hidden md:block text-4xl lg:text-5xl xl:text-6xl font-thin mb-8 lg:mb-10">
                WHAT OUR COMMUNITY SAYS
              </h2>

              {/* Reviews Stack */}
              <div className="relative h-[350px] sm:h-[320px] md:h-[380px] lg:h-[400px]">
                {reviews.map((review, index) => (
                  <ReviewCard
                    key={index}
                    review={review}
                    index={index}
                    activeIndex={currentReview}
                  />
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReviewsBlock;
-e 


File: ./src/app/components/FutureOfMusicBlock.jsx
===================
import React from 'react';
import Image from 'next/image';
import Link from 'next/link';

const ChevronArrow = () => (
  <svg viewBox="0 0 18 18" className="w-4 h-4">
    <polygon 
      fillRule="evenodd" 
      fill="currentColor" 
      stroke="currentColor" 
      strokeWidth=".5" 
      points="0 .682 6.635 3.999 0 7.317 0 8 8 3.999 0 0" 
      transform="translate(5 5)"
    />
  </svg>
);

const ChevronLink = ({ href, children }) => (
  <Link 
    href={href}
    className="flex items-center text-black hover:text-gray-700 transition-colors group"
  >
    <span className="mr-2">{children}</span>
    <div className="transition-transform group-hover:translate-x-1">
      <ChevronArrow />
    </div>
  </Link>
);

const FutureOfMusicBlock = () => {
  return (
    <div className="bg-black text-white py-16 ">
      <div className="container mx-auto px-4">
        {/* Mobile Heading */}
        <div className="lg:hidden mb-8">
          <div className="md:ml-[8.33%]">
            <h2 className="text-2xl font-thin mb-6">
              The Future of Music
            </h2>
          </div>
          <div className="hidden md:block md:ml-[8.33%] md:w-[83.33%]">
            <hr className="border-t border-gray-700" />
          </div>
        </div>

        <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between">
          {/* Image Section */}
          <div className="md:ml-[8.33%] lg:ml-0 md:w-[41.66%] lg:w-5/12">
            <div className="w-full h-full">
              <div className="relative w-full pt-[100%]">
                <Image
                  src="/Naarah-A-World-of-Opportunity-Comes-Closer_2024-10-09-140523_hwuv.jpg"
                  alt="A student peers up at a ceiling dotted with many ornate lights"
                  fill
                  className="object-cover"
                  sizes="(max-width: 768px) 100vw, 50vw"
                  priority
                />
              </div>
            </div>
          </div>

          {/* Text Section */}
          <div className="md:ml-[8.33%] lg:ml-[16.66%] md:w-[41.66%] lg:w-5/12 mt-8 lg:mt-0">
            {/* Desktop Heading */}
            <h2 className="hidden lg:block text-2xl font-thin mb-6">
              The Future of Music
            </h2>

            {/* Content */}
            <div className="space-y-4 mb-8">
              <p>
                Together we have the power to help talented students
                realise their potential.
              </p>
              <p>
                With your support, we can help new generations discover, develop and master their craft – for the whole world to enjoy.
              </p>
            </div>

            {/* Links */}
            <ul className="space-y-4">
              <li>
                <ChevronLink href="/support-the-academy/campaign">
                  Find out more
                </ChevronLink>
              </li>
              <li>
                <ChevronLink href="https://community.ram.ac.uk/campaign-donate">
                  Give today
                </ChevronLink>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FutureOfMusicBlock;-e 


File: ./src/app/components/ActiveSlider.jsx
===================
"use client";
import React from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/swiper-bundle.css";
import { EffectCoverflow, Pagination, Navigation } from "swiper/modules";
import { X } from "lucide-react";

export default function ActiveSlider({ onClose }) {
  const images = [
    "/events/recital_gathering.jpg",
    "/events/recital_orchestration.jpg",
    "/events/recital_picture.jpg",
    "/events/recital_practice.jpg",
    "/events/recital_violins.jpg",
  ];

  return (
    <div className="h-full flex flex-col justify-center">
      <div className="max-w-7xl mx-auto px-4 w-full">
        <div className="flex justify-end mb-8">
          <button 
            onClick={onClose}
            className="text-white hover:text-gray-300 transition-colors"
            aria-label="Close slider"
          >
            <X size={24} />
          </button>
        </div>
        
        <Swiper
          modules={[EffectCoverflow, Pagination, Navigation]}
          effect="coverflow"
          grabCursor={true}
          centeredSlides={true}
          loop={true}
          slidesPerView={"auto"} // Automatically adjust slides per view
          spaceBetween={20} // Space between the slides
          breakpoints={{
            // For smaller screens, show fewer slides
            640: {
              slidesPerView: 1,
              centeredSlides: true,
            },
            768: {
              slidesPerView: 2,
              centeredSlides: true,
            },
            1024: {
              slidesPerView: 3,
              centeredSlides: true,
            },
          }}
          coverflowEffect={{
            rotate: 50,
            stretch: 0,
            depth: 100,
            modifier: 1,
            slideShadows: true,
          }}
          pagination={{
            type: "bullets",
            clickable: true,
          }}
          navigation={true}
          className="mySwiper"
        >
          {images.map((src, index) => (
            <SwiperSlide key={index} className="swiper-slide">
              <img
                src={src}
                alt={`Slide ${index + 1}`}
                className="w-full h-auto max-h-[400px] md:max-h-[500px] rounded-xl object-cover mx-auto"
              />
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </div>
  );
}
-e 


File: ./src/app/components/FooterTop.jsx
===================
import React from 'react';
import Link from 'next/link';

const FacebookIcon = () => (
  <svg viewBox="0 0 24 24" className="w-6 h-6 fill-current transform transition-transform duration-300 group-hover:scale-110">
    <path d="M9 8H6v4h3v12h5V12h3.642L18 8h-4V6.333C14 5.378 14.192 5 15.115 5H18V0h-3.808C10.596 0 9 1.583 9 4.615V8z" />
  </svg>
);

const InstagramIcon = () => (
  <svg viewBox="0 0 24 24" className="w-6 h-6 fill-current transform transition-transform duration-300 group-hover:scale-110">
    <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zM12 0C8.741 0 8.333.014 7.053.072 2.695.272.273 2.69.073 7.052.014 8.333 0 8.741 0 12c0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98C8.333 23.986 8.741 24 12 24c3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98C15.668.014 15.259 0 12 0zm0 5.838a6.162 6.162 0 100 12.324 6.162 6.162 0 000-12.324zM12 16a4 4 0 110-8 4 4 0 010 8zm6.406-11.845a1.44 1.44 0 100 2.881 1.44 1.44 0 000-2.881z" />
  </svg>
);

const YouTubeIcon = () => (
  <svg viewBox="0 0 24 24" className="w-6 h-6 fill-current transform transition-transform duration-300 group-hover:scale-110">
    <path d="M23.498 6.186a3.016 3.016 0 00-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 00.502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 002.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 002.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
  </svg>
);

const FooterTop = () => {
  return (
    <div className="bg-black text-white py-8">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row justify-between items-center space-y-6 md:space-y-0">
          {/* Social Media Navigation */}
          <nav aria-label="Social" className="w-full md:w-auto">
            <h5 className="sr-only">Social Media Navigation</h5>
            <ul className="flex justify-center md:justify-start space-x-6">
              <li>
                <a
                  href="https://www.facebook.com/goodshepherdmusic/?_rdr"
                  className="text-white hover:text-gray-300 group"
                  aria-label="A link to facebook"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <span className="sr-only">facebook</span>
                  <FacebookIcon />
                </a>
              </li>
              <li>
                <a
                  href="https://www.instagram.com/goodshepherdim?igsh=enNqcXZlbHhseDVh"
                  className="text-white hover:text-gray-300 group"
                  aria-label="A link to instagram"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <span className="sr-only">instagram</span>
                  <InstagramIcon />
                </a>
              </li>
              <li>
                <a
                  href="https://youtube.com/@goodshepherdinstituteofmus1616?si=MnNhjRKhsCaDvK6O"
                  className="text-white hover:text-gray-300 group"
                  aria-label="A link to youtube"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <span className="sr-only">youtube</span>
                  <YouTubeIcon />
                </a>
              </li>
            </ul>
          </nav>

          {/* Secondary Navigation */}
          <nav aria-label="Secondary Navigation" className="w-full md:w-auto">
            <h5 className="sr-only">Secondary Navigation</h5>
            <ul className="flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-4 lg:space-x-8">
              <li>
                <Link href="/about-us" className="relative text-white font-bold group">
                  About us
                  <span className="absolute left-0 bottom-0 block w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full"></span>
                </Link>
              </li>
              <li>
                <Link href="/terms-and-conditions" className="relative text-white font-bold group">
                  Terms and Conditions
                  <span className="absolute left-0 bottom-0 block w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full"></span>
                </Link>
              </li>
              <li>
                <Link href="/privacy-policy" className="relative text-white font-bold group">
                  Privacy Policy
                  <span className="absolute left-0 bottom-0 block w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full"></span>
                </Link>
              </li>
              <li>
                <Link href="/cancellations-and-refunds" className="relative text-white font-bold group">
                  Cancellations and Refunds
                  <span className="absolute left-0 bottom-0 block w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full"></span>
                </Link>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  );
};

export default FooterTop;-e 


File: ./src/app/components/TeachersandtutorsBlock.jsx
===================
"use client";
import { useState, useEffect } from 'react';

export default function TeachersandtutorsBlock() {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      { threshold: 0.1 }
    );

    const elements = document.querySelectorAll('[data-intersect="once"]');
    elements.forEach(el => observer.observe(el));

    return () => {
      elements.forEach(el => observer.unobserve(el));
    };
  }, []);

  return (
    <div className="bg-black py-16">
      <div className="container mx-auto px-4">
        <div className="lg:hidden">
          <div className="md:ml-[8.33%] md:w-1/2">
            <h2 
              data-intersect="once"
              className={`text-5xl text-white font-thin mb-6 transform transition-transform duration-500 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
              }`}
            >
              TEACHERS & MENTORS
            </h2>
          </div>
          <div className="hidden md:block md:ml-[8.33%] md:w-[83.33%]">
            <hr className="border-t border-white/20" />
          </div>
        </div>

        {/* Tablet Header (hidden on desktop) */}
        <div className="hidden md:block lg:hidden">
          <div className="md:ml-[8.33%] md:w-1/2">
            <h2 
              data-intersect="once"
              className={`text-2xl text-white font-bold mb-1 transform transition-transform duration-500 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
              }`}
            >
              TEACHERS &amp; MENTORS
            </h2>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex flex-wrap">
          {/* Text Content */}
          <div className="md:w-[41.66%] md:ml-[8.33%] flex flex-col justify-center">
            <div 
              data-intersect="once"
              className={`md:pr-4 transform transition-transform duration-500 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
              }`}
            >
              {/* Desktop Header */}
              <h2 className="hidden lg:block text-7xl font-thin text-white mb-6">
                TEACHERS & MENTORS
              </h2>

              {/* Main Content - Desktop/Tablet */}
              <div className="hidden md:block">
                <div className="pr-2 lg:pr-24">
                  <p className="mb-6 text-white">
                    Experienced tutors share their knowledge and insights, creating a space where students can learn, explore, and grow at their own pace, guided by genuine support and understanding.
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Image Section */}
          <div className="md:w-1/2 lg:w-[41.66%] ">
            <div 
              data-intersect="once"
              className={`px-0 lg:px-3 transform transition-opacity duration-500 ${
                isVisible ? 'opacity-100' : 'opacity-0'
              }`}
            >
              <img
                src="/Tutors.jpg"
                alt="A violin duo perform alongside each other, reading sheet music"
                className="w-full h-auto grayscale"
              />
            </div>
          </div>
        </div>

        {/* Mobile Content Section */}
        <div className="sm:block md:hidden">
          <div 
            data-intersect="once"
            className={`lg:w-1/2 lg:ml-[8.33%] transform transition-transform duration-500 ${
              isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
            }`}
          >
            <div className="pr-2 lg:pr-24">
              <p className="mb-6 text-white">
                Experienced tutors share their knowledge and insights, creating a space where students can learn, explore, and grow at their own pace, guided by genuine support and understanding.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
-e 


File: ./src/app/components/MusicRegistrationForm.jsx
===================
"use client"
import { useState } from "react"
import { toast } from "sonner"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { PhoneInput } from "@/components/ui/phone-input"

// Form validation schema
const formSchema = z.object({
  Name: z.string().min(1, "Name is required"),
  "Activity Status": z.string().optional(),
  Gender: z.string().min(1, "Gender is required"),
  "School / College / Occupation": z.string().optional(),
  "E - mail": z.string().email().optional(),
  "Phone number": z.string().min(1, "Phone number is required"),
  "Residence Address": z.string().optional(),
  "Type of Musical Instrument": z.string().min(1, "Instrument type is required"),
  "Date of Birth": z.string().refine((val) => !isNaN(Date.parse(val)), "Invalid date format"), // Accepting string but validating format
})

const activityOptions = [
  "School",
  "College",
  "Working Professional",
  "Other"
]

const genderOptions = [
  "Male",
  "Female",
  "Other",
  "Prefer not to say"
]

const instrumentOptions = [
  "Piano",
  "Keyboard",
  "Guitar",
  "Violin",
  "Drums",
  "Recorder",
  "Ukulele",
  "Classical Vocals",
  "Western Vocals",
  "Dance",
  "Other"
]

export default function MusicRegistrationForm() {
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      Name: "",
      "Activity Status": "",
      Gender: "",
      "School / College / Occupation": "",
      "E - mail": "",
      "Phone number": "",
      "Residence Address": "",
      "Type of Musical Instrument": "",
      "Date of Birth": "",
    },
  })

  // Form submission handler
  async function onSubmit(values) {
    try {
      // Debugging: Log form data to check its structure
      console.log("Form data before submission:", values);

      // Convert Date of Birth to Date object and format it as an ISO string
      const formattedValues = {
        ...values,
        "Date of Birth": new Date(values["Date of Birth"]).toISOString(),  // Ensure a valid date format for submission
      }

      const response = await fetch("/api/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formattedValues), // Send the updated values
      })

      const data = await response.json()

      if (response.ok) {
        toast.success("Form submitted successfully!")
        form.reset() // Optionally reset the form
      } else {
        toast.error(data.error || "Failed to submit the form. Please try again.")
      }
    } catch (error) {
      console.error("Form submission error", error)
      toast.error("Failed to submit the form. Please try again.")
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 max-w-3xl mx-auto py-10">
        {/* Grid Layout for Name and Date of Birth */}
        <div className="grid grid-cols-12 gap-4">
          <div className="col-span-6">
            <FormField
              control={form.control}
              name="Name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter your name" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="col-span-6">
            <FormField
              control={form.control}
              name="Date of Birth"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Date of Birth</FormLabel>
                  <FormControl>
                    <Input
                      type="date"
                      onChange={(e) => field.onChange(e.target.value)}
                      placeholder="Select your date of birth"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </div>

        {/* Rest of the form */}
        <div className="grid grid-cols-12 gap-4">
          <div className="col-span-6">
            <FormField
              control={form.control}
              name="Activity Status"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Activity Status</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select your Current Status" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {activityOptions.map((option) => (
                        <SelectItem key={option} value={option}>
                          {option}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="col-span-6">
            <FormField
              control={form.control}
              name="Gender"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Gender</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select your Gender" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {genderOptions.map((option) => (
                        <SelectItem key={option} value={option}>
                          {option}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </div>

        <FormField
          control={form.control}
          name="School / College / Occupation"
          render={({ field }) => (
            <FormItem>
              <FormLabel>School / College / Occupation</FormLabel>
              <FormControl>
                <Input placeholder="Enter your school/college/occupation" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="grid grid-cols-12 gap-4">
          <div className="col-span-6">
            <FormField
              control={form.control}
              name="E - mail"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>E-mail</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter your email" type="email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="col-span-6">
            <FormField
              control={form.control}
              name="Phone number"
              render={({ field }) => (
                <FormItem className="flex flex-col items-start">
                  <FormLabel>Phone number</FormLabel>
                  <FormControl className="w-full">
                    <PhoneInput {...field} defaultCountry="IN" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </div>

        <FormField
          control={form.control}
          name="Residence Address"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Residence Address</FormLabel>
              <FormControl>
                <Input placeholder="Enter your address" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="Type of Musical Instrument"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Type of Musical Instrument</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select an instrument you want to learn" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {instrumentOptions.map((option) => (
                    <SelectItem key={option} value={option}>
                      {option}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}-e 


File: ./src/app/components/RecitalBlock.jsx
===================
"use client";
import Link from 'next/link';
import { useState, useEffect } from 'react';
import ActiveSlider from './ActiveSlider';

export default function RecitalBlock() {
  const [isVisible, setIsVisible] = useState(false);
  const [isSliderOpen, setIsSliderOpen] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true); // Start the animation when the element is visible
          observer.unobserve(entry.target); // Stop observing once it is in view
        }
      },
      {
        threshold: 0.2, // The threshold defines how much of the element should be in view before the observer is triggered (e.g., 0.1 = 10%)
      }
    );

    // Select all elements that should trigger the animation when in view
    const elements = document.querySelectorAll('[data-intersect="once"]');
    elements.forEach((element) => observer.observe(element));

    // Cleanup observer when the component is unmounted or the effect is rerun
    return () => {
      elements.forEach((element) => observer.unobserve(element));
    };
  }, []);

  const handleOpenSlider = (e) => {
    e.preventDefault();
    setIsSliderOpen(true);
    // Prevent body scrolling when modal is open
    document.body.style.overflow = 'hidden';
  };

  // Handle closing the slider
  const handleCloseSlider = () => {
    setIsSliderOpen(false);
    // Restore body scrolling
    document.body.style.overflow = 'unset';
  };

  return (
    <div className="bg-white text-black py-16">
      <div className="container mx-auto px-4">
        
        {/* Section with Heading and Divider (visible on small screens only) */}
        <div className="lg:hidden">
          <div className="md:ml-[8.33%]">
            <h2
              className={`text-5xl font-thin mb-6 transform transition-transform duration-1000 ease-out text-custom-red ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
              }`}
              data-intersect="once"
            >
              RECITALS
            </h2>
          </div>
          <div className="hidden md:block md:ml-[8.33%] md:w-[83.33%]">
            <hr className="border-t border-white/20" />
          </div>
        </div>

        {/* Main Content Section */}
        <div className="flex flex-wrap">
          {/* Text Content for Small Screens */}
          <div className="md:ml-[8.33%] md:w-[41.66%] flex flex-col lg:justify-center">
            <div
              className={`transform transition-transform duration-1000 ease-out  ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
              }`}
              data-intersect="once"
            >
              {/* Hidden Heading for Larger Screens */}
              <h2
                className={`hidden lg:block text-8xl font-thin mb-12 text-custom-red ${
                  isVisible ? 'opacity-100' : 'opacity-0'
                }`}
              >
                RECITALS
              </h2>
              <div className="hidden md:block">
                <div className="pr-2 lg:pr-24">
                  <p className="mb-4">
                    <span>
                    Each month, Academy students perform, showcasing a range of musical styles with instruments like String Orchestra, Violin, Drums, Piano, Keyboard, and Guitar—spanning Orchestral, Chamber Music, and Contemporary Performances.
                    </span>
                  </p>
                  <p className="mb-6">Explore our gallery for a glimpse into past recitals</p>
                </div>
                <div>
                  <ul>
                    <li>
                      <button
                        onClick={handleOpenSlider}
                        className="group inline-flex items-center text-black hover:text-black transition-colors relative"
                      >
                        <div className="relative inline-block">
                          <span className="mr-2">SEE OUR RECITAL EVENTS</span>
                          {/* Underline effect */}
                          <span className="absolute bottom-0 left-0 w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full inline-block"></span>
                        </div>
                        <div className="transform transition-transform group-hover:translate-x-1">
                          <svg viewBox="0 0 18 18" className="w-4 h-4 text-custom-red group-hover:hidden">
                            <polygon
                              fillRule="evenodd"
                              fill="currentColor"
                              stroke="currentColor"
                              strokeWidth=".5"
                              points="0 .682 6.635 3.999 0 7.317 0 8 8 3.999 0 0"
                              transform="translate(5 5)"
                            />
                          </svg>
                        </div>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          {/* Image Section for Larger Screens */}
          <div className="md:w-[41.66%] lg:ml-[8.33%]">
            <div
              className={`transform transition-opacity duration-1000 ease-out ${
                isVisible ? 'opacity-100' : 'opacity-0'
              }`}
              data-intersect="once"
            >
              <img
                src="/Recital.png"
                alt="An image of a student playing the cello, with the Royal Academy of Music logo and the title 'Spring 2025' superimposed"
                className="w-full h-auto"
              />
            </div>
          </div>
        </div>

        {/* Section with Divider and Text (visible on mobile screens only) */}
        <div className="sm:block md:hidden">
          <div
            className={`lg:w-1/2 lg:ml-[8.33%] transform transition-transform duration-1000 ease-out ${
              isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
            }`}
            data-intersect="once"
          >
            <div className="pr-2 lg:pr-24">
              <p className="mb-4">
                <span>
                  Each month, Academy students perform, showcasing a range of musical styles with instruments like String Orchestra, Violin, Drums, Piano, Keyboard, and Guitar—spanning Orchestral, Chamber Music, and Contemporary Performances.
                </span>
              </p>
              <p className="mb-6">Explore our gallery for a glimpse into past recitals.</p>
            </div>
            <div>
              <ul>
                <li>
                  <button
                    onClick={handleOpenSlider}
                    className="group inline-flex items-center text-black hover:text-black transition-colors relative"
                  >
                    <div className="relative inline-block">
                      <span className="mr-2">SEE OUR RECITAL EVENTS</span>
                      {/* Underline effect */}
                      <span className="absolute bottom-0 left-0 w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full inline-block"></span>
                    </div>
                    <div className="transform transition-transform group-hover:translate-x-1">
                      <svg viewBox="0 0 18 18" className="w-4 h-4 text-custom-red group-hover:hidden">
                        <polygon
                          fillRule="evenodd"
                          fill="currentColor"
                          stroke="currentColor"
                          strokeWidth=".5"
                          points="0 .682 6.635 3.999 0 7.317 0 8 8 3.999 0 0"
                          transform="translate(5 5)"
                        />
                      </svg>
                    </div>
                  </button>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      {isSliderOpen && (
        <div className="fixed inset-0 z-50">
          {/* Backdrop */}
          <div
            className="absolute inset-0 bg-black/50 backdrop-blur-sm"
            onClick={handleCloseSlider}
          ></div>
          
          {/* Modal Content */}
          <div className="relative z-10 w-full h-full">
            <ActiveSlider onClose={handleCloseSlider} />
          </div>
        </div>
      )}
    </div>
  );
}
-e 


File: ./src/app/components/MainNavigation.jsx
===================
'use client';
import React, { useEffect, useState, useRef } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '@/context/AuthContext';

const Navigation = () => {
  const { isLoggedIn, setIsLoggedIn } = useAuth();
  const [showElements, setShowElements] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const menuRef = useRef(null);
  const menuButtonRef = useRef(null);
  const [windowWidth, setWindowWidth] = useState(
    typeof window !== 'undefined' ? window.innerWidth : 0
  );

  useEffect(() => {
    setTimeout(() => {
      setShowElements(true);
    }, 200);

    const handleClickOutside = (event) => {
      if (
        menuRef.current && 
        !menuRef.current.contains(event.target) && 
        menuButtonRef.current && 
        !menuButtonRef.current.contains(event.target)
      ) {
        setIsMenuOpen(false);
      }
    };

    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };

    window.addEventListener('resize', handleResize);
    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      window.removeEventListener('resize', handleResize);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleLogout = () => {
    setIsLoggedIn(false);
  };

  const toggleMenu = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsMenuOpen(prev => !prev);
  };

  const scrollToAdmissions = (e) => {
    e.preventDefault();
    setIsMenuOpen(false);
    
    setTimeout(() => {
      const admissionsSection = document.getElementById('admissions');
      if (admissionsSection) {
        // Get the exact position accounting for all layout factors
        const header = document.querySelector('.gradient');
        const headerHeight = header ? header.offsetHeight : 0;
        
        // Calculate the exact scroll position needed
        const elementRect = admissionsSection.getBoundingClientRect();
        const targetPosition = window.pageYOffset + elementRect.top - headerHeight;
        
        // Adjust the scroll position to scroll a little farther
        const offset = 200;
        const finalTargetPosition = targetPosition + offset;
        
        // Use CSSOM smooth scroll for perfect alignment
        window.scrollTo({
          top: finalTargetPosition,
          behavior: 'smooth'
        });

        // Remove the timeout check and directly set the scroll position after animation.
        setTimeout(() => {
          // Ensure the scroll position stays at the final target
          window.scrollTo(0, finalTargetPosition);
        }, 850); // Wait for the scroll animation to finish
      }
    }, 300);
  };

  // Enhanced animations
  const menuVariants = {
    hidden: { 
      opacity: 0,
      y: -20,
      scale: 0.95,
      transformOrigin: 'top right',
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 30,
        duration: 0.3
      }
    },
    visible: { 
      opacity: 1,
      y: 0,
      scale: 1,
      transformOrigin: 'top right',
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 30,
        duration: 0.3,
        staggerChildren: 0.07,
        delayChildren: 0.1
      }
    }
  };

  const menuItemVariants = {
    hidden: { 
      opacity: 0, 
      y: -15,
      transition: {
        duration: 0.2
      }
    },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        type: 'spring',
        stiffness: 400,
        damping: 25
      }
    }
  };

  // Calculate dropdown position based on screen size
  const getDropdownStyles = () => {
    // For mobile screens
    if (windowWidth < 640) {
      return {
        width: '200px',
        maxWidth: '80%',
        right: '1rem',
        top: '4.5rem'
      };
    }
    // For tablets
    else if (windowWidth < 1024) {
      return {
        width: '250px',
        maxWidth: '80%',
        right: '1rem',
        top: '5rem'
      };
    }
    // For desktops
    else {
      return {
        width: '280px',
        maxWidth: '25%',
        right: '2rem',
        top: '5rem'
      };
    }
  };

  const dropdownStyles = getDropdownStyles();

  return (
    <div className="absolute z-50 w-full gradient">
      <div className="relative container mx-auto px-4 md:px-[4.375rem] max-w-[1300px]">
        <nav className="relative z-10 flex items-start justify-between pt-[2.625rem] pb-[2.375rem]">
          <h2 className="sr-only">Website Navigation</h2>

          <div className={`nav-logo w-[150px] md:w-[10.4375rem] flex-shrink-0 flex items-center transition-all duration-500 ${showElements ? 'opacity-100 translate-x-0 delay-200' : 'opacity-0 translate-x-[-20px]'}`}>
            <Link href="https://goodshepherdim.com/" className="block">
              <div className="relative">
                <Image
                  src="/GSIM_logo.png"
                  alt="Royal Academy of Music"
                  width={120}
                  height={30}
                  className="transform transition-transform duration-300 opacity-100 sm:w-[100px] md:w-[120px]"
                />
              </div>
              <span className="sr-only">Good Shepherd Institute Of Music</span>
            </Link>
          </div>

          <div className={`flex mt-[-.5625rem] space-x-[0.8125rem] relative`}>
            <div className={`nav-login relative transition-all duration-500 ${showElements ? 'opacity-100 translate-x-0 delay-300' : 'opacity-0 translate-x-[20px]'}`}>
              {isLoggedIn ? (
                <button
                  onClick={handleLogout}
                  className="p-2 text-white bg-transparent hover:text-gray-200 transition-colors duration-200 group relative"
                >
                  <svg 
                    width="16" 
                    height="17" 
                    viewBox="0 0 16 17" 
                    xmlns="http://www.w3.org/2000/svg" 
                    className="text-custom-red translate-y-1"
                  >
                    <path 
                      d="M8.29183 7.66667C10.1328 7.66667 11.6252 6.17428 11.6252 4.33333C11.6252 2.49238 10.1328 1 8.29183 1C6.45088 1 4.9585 2.49238 4.9585 4.33333C4.9585 6.17428 6.45088 7.66667 8.29183 7.66667Z" 
                      stroke="currentColor" 
                      strokeWidth="2" 
                      strokeLinecap="round" 
                      strokeLinejoin="round"
                    />
                    <path 
                      d="M14.9583 16V14.3333C14.9583 13.4493 14.6071 12.6014 13.982 11.9763C13.3569 11.3512 12.5091 11 11.625 11H4.95833C4.07428 11 3.22643 11.3512 2.60131 11.9763C1.97619 12.6014 1.625 13.4493 1.625 14.3333V16" 
                      stroke="currentColor" 
                      strokeWidth="2" 
                      strokeLinecap="round" 
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="sr-only">Log out</span>
                </button>
              ) : (
                <Link href="/login">
                  <button
                    className="p-2 text-white bg-transparent hover:text-gray-200 transition-colors duration-200 group relative"
                  >
                    <svg 
                      width="16" 
                      height="17" 
                      viewBox="0 0 16 17" 
                      xmlns="http://www.w3.org/2000/svg" 
                      className="group-hover:text-custom-red translate-y-1"
                    >
                      <path 
                        d="M8.29183 7.66667C10.1328 7.66667 11.6252 6.17428 11.6252 4.33333C11.6252 2.49238 10.1328 1 8.29183 1C6.45088 1 4.9585 2.49238 4.9585 4.33333C4.9585 6.17428 6.45088 7.66667 8.29183 7.66667Z" 
                        stroke="currentColor" 
                        strokeWidth="2" 
                        strokeLinecap="round" 
                        strokeLinejoin="round"
                      />
                      <path 
                        d="M14.9583 16V14.3333C14.9583 13.4493 14.6071 12.6014 13.982 11.9763C13.3569 11.3512 12.5091 11 11.625 11H4.95833C4.07428 11 3.22643 11.3512 2.60131 11.9763C1.97619 12.6014 1.625 13.4493 1.625 14.3333V16" 
                        stroke="currentColor" 
                        strokeWidth="2" 
                        strokeLinecap="round" 
                        strokeLinejoin="round"
                      />
                    </svg>
                    <span className="sr-only">Log in</span>
                  </button>
                </Link>
              )}
            </div>

            <div className={`nav-payment transition-all duration-500 ${showElements ? 'opacity-100 translate-x-0 delay-400' : 'opacity-0 translate-x-[20px]'}`}>
              <Link href="/payment">
                <button
                  className="p-2 text-white hover:text-gray-200 transition-colors duration-200 group"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 32 32"
                    className="w-6 h-6 transition-all duration-400 fill-current group-hover:text-custom-red"
                  >
                    <path d="M27,7H5A2,2,0,0,0,3,9V23a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V9A2,2,0,0,0,27,7ZM11,22H7a1,1,0,0,1,0-2h4a1,1,0,0,1,0,2Zm1-7a1,1,0,0,1-1,1H7a1,1,0,0,1-1-1V11a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1Zm13,7H17a1,1,0,0,1,0-2h8a1,1,0,0,1,0,2Z"></path>
                  </svg>
                  <span className="sr-only">Go to payment</span>
                </button>
              </Link>
            </div>

            <div className={`nav-button transition-all duration-500 ${showElements ? 'opacity-100 translate-x-0 delay-500' : 'opacity-0 translate-x-[20px]'}`}>
              <button 
                ref={menuButtonRef}
                id="globalNavToggle"
                onClick={toggleMenu}
                className="p-2 text-white hover:text-gray-200 transition-colors duration-200 group relative w-6 h-6"
                aria-expanded={isMenuOpen}
                aria-controls="navigation-menu"
              >
                <div className="absolute inset-0 flex flex-col justify-center items-center">
                {!isMenuOpen ? (
                  <>
                    <motion.div 
                      className="absolute w-6 h-0.5 bg-current group-hover:bg-custom-red"
                      initial={{ width: '66%', y: -4 }}
                      animate={{ width: isMenuOpen ? '100%' : '66%', y: -3 }}
                      transition={{ duration: 0.3 }}
                    />
                    <motion.div 
                      className="absolute w-6 h-0.5 bg-current group-hover:bg-custom-red"
                      initial={{ width: '100%', y: 4 }}
                      animate={{ width: '100%', y: 3 }}
                      transition={{ duration: 0.3 }}
                    />
                  </>
                ) : (
                  <>
                    <motion.div 
                      className="absolute w-6 h-0.5 bg-current group-hover:bg-custom-red"
                      initial={{ rotate: 0, y: -3 }}
                      animate={{ 
                        rotate: 45, 
                        y: 0,
                        width: '100%'
                      }}
                      transition={{ duration: 0.3 }}
                      style={{ transformOrigin: 'center' }}
                    />
                    <motion.div 
                      className="absolute w-6 h-0.5 bg-current group-hover:bg-custom-red"
                      initial={{ rotate: 0, y: 3 }}
                      animate={{ 
                        rotate: -45, 
                        y: 0,
                        width: '100%'
                      }}
                      transition={{ duration: 0.3 }}
                      style={{ transformOrigin: 'center' }}
                    />
                  </>
                )}
                </div>
                <span className="sr-only">{isMenuOpen ? 'Close menu' : 'Open menu'}</span>
              </button>
            </div>
          </div>
        </nav>
      </div>

      <AnimatePresence>
        {isMenuOpen && (
          <motion.div 
            ref={menuRef}
            id="navigation-menu"
            initial="hidden"
            animate="visible"
            exit="hidden"
            variants={menuVariants}
            className="fixed z-[9999] pointer-events-none"
            style={{
              top: dropdownStyles.top,
              right: dropdownStyles.right,
              width: dropdownStyles.width,
              maxWidth: dropdownStyles.maxWidth
            }}
          >
            <div 
              className="w-full origin-top-right shadow-xl pointer-events-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="bg-black bg-opacity-85 rounded-lg overflow-hidden border border-gray-800">
                <motion.div 
                  initial="hidden"
                  animate="visible"
                  variants={menuItemVariants}
                  className="flex flex-col p-4"
                >
                  <motion.div 
                    variants={menuItemVariants}
                    className="overflow-hidden"
                  >
                    <Link 
                      href="/about-us" 
                      className="block text-white text-base font-medium text-center py-3 px-4 hover:text-custom-red transition-colors duration-300"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      About Us
                    </Link>
                  </motion.div>

                  <motion.div 
                    variants={menuItemVariants}
                    className="overflow-hidden mt-1"
                  >
                    <Link 
                      href="/exams" 
                      className="block text-white text-base font-medium text-center py-3 px-4 hover:text-custom-red transition-colors duration-300"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      Exams
                    </Link>
                  </motion.div>

                  <motion.div 
                    variants={menuItemVariants}
                    className="overflow-hidden mt-1"
                  >
                    <a 
                      href="#admissions" 
                      className="block text-white text-base font-medium text-center py-3 px-4 hover:text-custom-red transition-colors duration-300"
                      onClick={scrollToAdmissions}
                    >
                      Admissions
                    </a>
                  </motion.div>
                </motion.div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Navigation;
-e 


File: ./src/app/components/AcademyGuideBlock.jsx
===================
"use client";
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

export default function AcademyGuideBlock() {
  const [isVisible, setIsVisible] = useState(false);
  const [isPdfModalOpen, setIsPdfModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      { threshold: 0.1 }
    );

    const elements = document.querySelectorAll('[data-intersect="once"]');
    elements.forEach(el => observer.observe(el));

    return () => {
      elements.forEach(el => observer.unobserve(el));
    };
  }, []);

  const openPdfModal = (e) => {
    e.preventDefault();
    setIsLoading(true);
    setIsPdfModalOpen(true);
    // Simulate PDF loading time
    setTimeout(() => setIsLoading(false), 1000);
  };

  return (
    <div className="bg-black text-white py-12 min-h-screen relative">
      <div className="container mx-auto px-4 flex flex-col justify-center">
        {/* Mobile/Tablet Header Section */}
        <div className="lg:hidden">
          <div className="md:ml-[8.33%] md:w-1/2">
            <h2 
              data-intersect="once"
              className={`text-5xl font-thin mb-6 transform transition-transform duration-500 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
              }`}
            >
              ACADEMY GUIDE 2025/26
            </h2>
          </div>
          <div className="hidden md:block md:ml-[8.33%] md:w-[83.33%]">
            <hr className="border-t border-white/20" />
          </div>
        </div>

        {/* Main Content */}
        <div className="flex flex-wrap">
          {/* Image Section */}
          <div className="md:w-[41.66%] md:ml-[8.33%] lg:ml-0 mb-6 sm:mb-8">
            <div 
              data-intersect="once"
              className={`transform transition-opacity duration-500 ${
                isVisible ? 'opacity-100' : 'opacity-0'
              }`}
            >
              <img
                src="/kid_piano.JPG"
                alt="A montage of images depicting students playing instruments on the Academy rooftop"
                className="w-full h-auto object-cover"
              />
            </div>
          </div>

          {/* Text Content */}
          <div className="md:w-[41.66%] md:ml-[8.33%] lg:ml-[16.66%] flex flex-col lg:justify-center">
            <div 
              data-intersect="once"
              className={`md:pr-4 transform transition-transform duration-500 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
              }`}
            >
              {/* Desktop Header */}
              <h2 className="hidden lg:block text-7xl font-thin mb-12">
                ACADEMY GUIDE 2025/26
              </h2>

              {/* Main Content - Desktop/Tablet */}
              <div className="hidden md:block">
                <div className="pr-2 lg:pr-24">
                  <p className="mb-4">
                    Discover all you need to know about our community, including academic programs, admission requirements, and how you can become a part of it.
                  </p>
                </div>
                <div>
                  <ul>
                    <li>
                      <a 
                        href="#view-pdf"
                        onClick={openPdfModal}
                        className="group inline-flex items-center text-white hover:text-gray-200 transition-colors relative"
                      >
                        <span className="mr-2">VIEW THE ACADEMY GUIDE</span>
                        <div className="transform transition-transform group-hover:translate-y-0.5">
                          <svg 
                            viewBox="0 0 18 18" 
                            className="w-4 h-4 text-custom-red group-hover:hidden"
                          >
                            <path 
                              fill="currentcolor" 
                              fillRule="evenodd" 
                              stroke="currentcolor" 
                              strokeWidth=".5" 
                              d="M7.71718345,0 L7.71718345,12.1272101 L5.24727719,8.28258915 L4.57511027,8.28258915 L8.00022475,13.6141744 L11.4248897,8.28258915 L10.7527228,8.28258915 L8.28281655,12.1276596 L8.28281655,0 L7.71718345,0 Z M0,16 L16,16 L16,15.4343722 L0,15.4343722 L0,16 Z" 
                              transform="translate(1 1)"
                            />
                          </svg>
                        </div>
                        {/* Underline effect */}
                        <span className="absolute bottom-0 left-0 w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full"></span>
                      </a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Mobile Content Section */}
        <div className="sm:block md:hidden">
          <div 
            data-intersect="once"
            className={`lg:w-1/2 lg:ml-[8.33%] transform transition-transform duration-500 ${
              isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
            }`}
          >
            <div className="pr-2 lg:pr-24">
              <p className="mb-4">
                Discover all you need to know about our community, including academic programs, admission requirements, and how you can become a part of it.
              </p>
            </div>
            <div>
              <ul>
                <li>
                  <a 
                    href="#view-pdf"
                    onClick={openPdfModal}
                    className="group inline-flex items-center text-white hover:text-gray-200 transition-colors relative"
                  >
                    <span className="mr-2">VIEW THE ACADEMY GUIDE</span>
                    <div className="transform transition-transform group-hover:translate-y-0.5">
                      <svg 
                        viewBox="0 0 18 18" 
                        className="w-4 h-4 text-custom-red group-hover:hidden"
                      >
                        <path 
                          fill="currentcolor" 
                          fillRule="evenodd" 
                          stroke="currentcolor" 
                          strokeWidth=".5" 
                          d="M7.71718345,0 L7.71718345,12.1272101 L5.24727719,8.28258915 L4.57511027,8.28258915 L8.00022475,13.6141744 L11.4248897,8.28258915 L10.7527228,8.28258915 L8.28281655,12.1276596 L8.28281655,0 L7.71718345,0 Z M0,16 L16,16 L16,15.4343722 L0,15.4343722 L0,16 Z" 
                          transform="translate(1 1)"
                        />
                      </svg>
                    </div>
                    {/* Underline effect */}
                    <span className="absolute bottom-0 left-0 w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full"></span>
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      {/* PDF Modal */}
      <AnimatePresence>
        {isPdfModalOpen && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/90"
            onClick={() => setIsPdfModalOpen(false)}
          >
            <motion.div 
              initial={{ scale: 0.9, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.9, y: 20 }}
              transition={{ 
                type: "spring", 
                damping: 25, 
                stiffness: 300 
              }}
              className="w-full max-w-4xl bg-black rounded-lg overflow-hidden shadow-2xl border border-white/10"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Modal Header */}
              <div className="flex items-center justify-between p-4 border-b border-white/10">
                <motion.h3 
                  initial={{ x: -20, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ delay: 0.2 }}
                  className="text-xl font-thin text-white"
                >
                  ACADEMY GUIDE 2025/26
                </motion.h3>
                <div className="flex space-x-3">
                  <motion.a
                    initial={{ y: -10, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.3 }}
                    href="/gsim-broucher.pdf"
                    download
                    className="inline-flex items-center px-3 py-1.5 bg-custom-red hover:bg-opacity-80 text-white text-sm font-medium rounded-sm transition-colors duration-200"
                  >
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    DOWNLOAD
                  </motion.a>
                  <motion.button
                    initial={{ y: -10, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.4 }}
                    className="inline-flex items-center justify-center p-1.5 bg-transparent hover:bg-white/10 text-white rounded-sm transition-colors duration-200 border border-white/20"
                    onClick={() => setIsPdfModalOpen(false)}
                    aria-label="Close modal"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </motion.button>
                </div>
              </div>
              
              {/* PDF Viewer */}
              <div className="relative w-full h-[70vh] bg-black overflow-hidden">
                {isLoading ? (
                  <motion.div 
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="absolute inset-0 flex items-center justify-center"
                  >
                    <motion.div 
                      animate={{ 
                        scale: [1, 1.1, 1],
                        opacity: [0.8, 1, 0.8] 
                      }}
                      transition={{ 
                        repeat: Infinity, 
                        duration: 1.5 
                      }}
                      className="flex flex-col items-center"
                    >
                      <svg className="w-12 h-12 text-custom-red" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M12,20L8,16H11V13H13V16H16M12,4L16,8H13V11H11V8H8M4,12H7L7,12V12H17V12L17,12H20L20,12C20,16.42 16.42,20 12,20C7.58,20 4,16.42 4,12Z" />
                      </svg>
                      <p className="mt-3 text-white font-thin">LOADING DOCUMENT...</p>
                    </motion.div>
                  </motion.div>
                ) : (
                  <motion.iframe 
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.5, duration: 0.5 }}
                    src="/gsim-broucher.pdf"
                    className="w-full h-full"
                    title="Academy Guide PDF"
                  />
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}-e 


File: ./src/app/components/FooterBottom.jsx
===================
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';

const FooterBottom = () => {
  return (
    <div className="w-full text-white bg-black">
      <div className="flex flex-col items-center py-8">
        {/* Logo */}
        <Link href="https://goodshepherdim.com/" className="mb-8">
          <Image
            src="/INS.png"
            alt="Royal Academy of Music"
            width={300}
            height={60}
            className="h-12 w-auto"
          />
          <span className="sr-only">Royal Academy of Music</span>
        </Link>

        {/* Address and Details */}
        <div className="text-center mb-8">
          <address className="mb-6 not-italic">
            Good Shepherd Institute Of Music <br />
            No. 33, Sankarapuram Main Road, Sankarapuram, Sithalapakkam, Chennai, Tamil Nadu
          </address>

          <div className="flex flex-col md:flex-row justify-center gap-8">
            <div className="text-center mb-6 md:mb-0">
              <h6 className="text-sm font-bold mb-1">Telephone</h6>
              <p className="m-0">
                <a href="tel:+919884556997" className="text-white">+91 98845 56997</a>
              </p>
              <p className="m-0">
                <a href="tel:+9198939396179" className="text-white">+91 89393 96179</a>
              </p>
            </div>
            <div className="text-center">
              <h6 className="text-sm font-bold mb-1">Mail to</h6>
              <p className="m-0">
                <a
                  href="mailto:goodshepherdim@gmail.com"
                  className="relative text-white font-bold group"
                >
                  goodshepherdim@gmail.com
                  <span className="absolute left-0 bottom-0 block w-0 h-0.25 bg-custom-red transition-all duration-300 group-hover:w-full"></span>
                </a>
              </p>
            </div>
          </div>
        </div>

        {/* Crest Logo */}
        <div className="mb-4">
          <Image
            src="/GSIM_only_logo.png"
            alt="Royal Academy of Music"
            width={80}
            height={80}
            className="w-20 h-auto"
          />
        </div>
      </div>
    </div>
  );
};

export default FooterBottom;-e 


File: ./src/app/components/AdmissionsBlock.jsx
===================
"use client";
import { useState, useEffect, useContext } from 'react';
import MusicRegistrationForm from './MusicRegistrationForm';
import AdmissionsDetails from './AdmissionDetails';
import { useAuth } from '@/context/AuthContext';

export default function AdmissionsBlock() {
  const { isLoggedIn } = useAuth();
  const [isVisible, setIsVisible] = useState(false);
  const [isMobile, setIsMobile] = useState(false); // Track screen width for mobile

  useEffect(() => {
    // Set up Intersection Observer
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      { threshold: 0.1 }
    );

    const elements = document.querySelectorAll('[data-intersect="once"]');
    elements.forEach(el => observer.observe(el));

    // Detect if screen size is mobile
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 1024); // You can adjust this threshold as needed
    };

    // Initial check
    checkMobile();

    // Update on resize
    window.addEventListener('resize', checkMobile);

    // Cleanup
    return () => {
      window.removeEventListener('resize', checkMobile);
      elements.forEach(el => observer.unobserve(el));
    };
  }, []);

  return (
    <div id='admissions' className="bg-white  py-16">
      <div className="container mx-auto px-4">
        {/* Heading - Always at the top regardless of screen size */}
        <h2
          data-intersect="once"
          className={`text-5xl md:text-5xl lg:text-7xl text-custom-red font-thin mb-6 transform transition-transform duration-500 ${
            isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
          }`}
        >
          ADMISSIONS
        </h2>
        
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Image - First on mobile, second on desktop */}
          {!isLoggedIn && ( // Conditionally render the image if not logged in
            <div className="w-full lg:w-1/2 order-1 lg:order-2">
              <div
                data-intersect="once"
                className={`transform transition-opacity duration-500 mb-6 lg:mb-0 ${
                  isVisible ? 'opacity-100' : 'opacity-0'
                }`}
              >
                <img
                  src="https://supercool-ram.transforms.svdcdn.com/production/auditions.jpg?w=1024&q=90&auto=format&fit=crop&crop=focalpoint&fp-x=0.5&fp-y=0.5&dm=1728916365&s=1291259c3c06b6c46fdcb8b5609ca4ba"
                  alt="Admissions"
                  className="w-full h-auto grayscale"
                />
              </div>
            </div>
          )}

          {/* Form - Second on mobile, first on desktop */}
          <div className={`w-full ${isLoggedIn ? 'lg:w-full' : 'lg:w-1/2'} order-2 lg:order-1`}>
            <div
              data-intersect="once"
              className={`transform transition-transform duration-500 ${
                isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
              }`}
            >
              {isLoggedIn ? (
                isMobile ? (
                  <div className="text-center text-gray-500">
                    Please log in from a desktop to view the details.
                  </div>
                ) : (
                  <AdmissionsDetails />
                )
              ) : (
                <MusicRegistrationForm />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
-e 


File: ./src/app/components/AlumniBlock.jsx
===================
import React from 'react';
import Image from 'next/image';
import Link from 'next/link';

const AlumniBlock = () => {
  return (
    <div className="bg-black py-16">
      <div className="container mx-auto px-4">
        {/* Top Image Row */}
        <div className="hidden lg:flex">
          <div className="w-2/12 ml-[8.333%]">
            <div className="relative aspect-[7/8]">
              <Image
                src="/Evelyn-Glennie-Headshot.jpg"
                alt=""
                fill
                className="object-cover"
              />
            </div>
          </div>
          <div className="w-2/12 ml-[58.333%]">
            <div className="relative aspect-[7/8]">
              <Image
                src="/Alexis-Ffrench-100.jpg"
                alt=""
                fill
                className="object-cover"
              />
            </div>
          </div>
        </div>

        {/* Header Row */}
        <div className="flex flex-wrap">
          <div className="lg:w-4/12">
            <div className="mb-8 lg:mb-0">
              <h2 className="text-white text-6xl md:text-7xl font-display">
                Follow 
                {/* <span className="block lg:inline">Their Lead</span>*/}
              </h2>
            </div>
          </div>
          <div className="lg:w-4/12">
            <div className="relative aspect-[7/8]">
              <Image
                src="/Jacob-Collier-Headshot.jpg"
                alt=""
                fill
                className="object-cover"
              />
            </div>
          </div>
          <div className="lg:w-4/12 hidden lg:block">
            <div className="flex items-start">
              <h2 className="text-white text-6xl md:text-7xl font-display" aria-hidden="true">
                Their Lead
              </h2>
            </div>
          </div>
        </div>

        {/* Content and Bottom Images Row */}
        <div className="flex flex-wrap mt-8">
          {/* Content Section */}
          <div className="w-full lg:w-6/12 lg:ml-[8.333%] order-2 lg:order-1">
            <div className="text-white mb-8">
              <p className="text-xl">Academy alumni shape musical culture in countless ways.</p>
            </div>
            
            {/* Desktop Links */}
            <ul className="hidden lg:flex space-x-8">
              <li>
                <Link href="/alumni/alumni-portal" className="text-white hover:underline">
                  Alumni Portal
                </Link>
              </li>
              <li>
                <Link href="/alumni/meet-our-alumni" className="text-white hover:underline">
                  Meet our alumni
                </Link>
              </li>
              <li>
                <Link href="/alumni/alumni-benefits" className="text-white hover:underline">
                  Alumni benefits
                </Link>
              </li>
            </ul>
          </div>

          {/* Bottom Images */}
          <div className="w-4/12 lg:w-2/12 order-1 lg:order-2">
            <div className="relative aspect-[7/8]">
              <Image
                src="/chloeflower-officialheadshot_720.jpg"
                alt=""
                fill
                className="object-cover"
              />
            </div>
          </div>
          <div className="w-8/12 lg:w-2/12 order-1 lg:order-3">
            <div className="relative aspect-[7/8]">
              <Image
                src="/RATTLE-Simon-Oliver-Helbig_2023-09-27-115006_pplb.jpg"
                alt=""
                fill
                className="object-cover"
              />
            </div>
          </div>
        </div>

        {/* Mobile Link */}
        <div className="flex justify-center my-8 lg:hidden">
          <Link href="/alumni" className="text-white hover:underline">
            our alumni
          </Link>
        </div>
      </div>
    </div>
  );
};

export default AlumniBlock;-e 


File: ./src/app/globals.css
===================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .gradient::before {
    content: " ";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 21.875rem; /* Adjust this height if necessary */
    background: linear-gradient(to bottom, #000 0%, transparent 100%);
    z-index: 10; /* Ensures it stays behind content */
  }

  /* Add responsive dropdown styles */
  .dropdown-menu-container {
    @apply fixed z-50 overflow-hidden;
  }

  /* Improved animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    to {
      opacity: 0;
      transform: translateY(-10px) scale(0.95);
    }
  }

  .animate-fadeIn {
    animation: fadeIn 0.3s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  .animate-fadeOut {
    animation: fadeOut 0.2s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    @apply overflow-x-hidden;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-slideUp {
  animation: slideUp 0.5s ease-out forwards;
}

/* Appended from results.css */
@keyframes floatUp {
  0% { transform: translateY(0); opacity: 0; }
  10% { opacity: 0.8; }
  80% { opacity: 0.6; }
  100% { transform: translateY(-100px); opacity: 0; }
}

@keyframes fallDown {
  0% { transform: translateY(0) rotate(0deg); opacity: 0; }
  10% { opacity: 1; }
  100% { transform: translateY(1000px) rotate(720deg); opacity: 0; }
}

@keyframes appear {
  0% { opacity: 0; transform: scale(0.8); }
  100% { opacity: 1; transform: scale(1); }
}

@keyframes shimmer {
  0% { background-position: -80vw 0; }
  100% { background-position: 80vw 0; }
}

@keyframes pulse-ring {
  0% { transform: scale(0.95); opacity: 0.7; }
  50% { transform: scale(1.05); opacity: 0.9; }
  100% { transform: scale(0.95); opacity: 0.7; }
}

@keyframes spin {
  0% { transform: translate(-50%, -50%) rotate(0deg); }
  100% { transform: translate(-50%, -50%) rotate(360deg); }
}

.animate-shimmer {
  background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0) 100%);
  background-size: 200% 100%;
  animation: shimmer 3s infinite;
}

.animate-fade-in {
  animation: appear 0.6s ease-out forwards;
}

.animate-pulse-ring {
  animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
}

.animate-spin-slow {
  animation: spin 12s linear infinite;
}

/* Result card specific styles */
.result-card {
  @apply bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm rounded-xl p-8 shadow-xl relative z-10 transition-all duration-700;
}

.result-status-card {
  @apply p-4 rounded-xl bg-gradient-to-r transform transition-all duration-700 hover:scale-105 mb-6 relative overflow-hidden;
}

/* Modified to remove group class */
.student-detail-card {
  @apply bg-gray-50 p-4 rounded-xl transition-all duration-500 hover:bg-gray-100 text-xl text-gray-900 font-semibold;
}

.achievement-badge {
  @apply bg-gradient-to-r from-blue-500/20 to-purple-500/20 p-4 rounded-full backdrop-blur-sm relative overflow-hidden shadow-lg;
}-e 


File: ./src/app/login/page.jsx
===================
'use client';
import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import Head from 'next/head';
import BackButton from '@/components/ui/back-button';
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { useAuth } from '@/context/AuthContext';
import { cn } from "@/lib/utils";
import {
  ArrowRight,
  Lock,
  Mail,
} from "lucide-react";
import DoodleBackground from "@/components/ui/doodle-background";

export default function LoginPage() {
  const [isHeadingVisible, setIsHeadingVisible] = useState(false);
  const [isLineVisible, setIsLineVisible] = useState(false);
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);
  const [loginData, setLoginData] = useState({
    email: '',
    password: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const router = useRouter();
  const { setIsLoggedIn } = useAuth();
  const containerRef = useRef(null);

  // Trigger visibility animations
  useEffect(() => {
    const timers = [
      setTimeout(() => setIsHeadingVisible(true), 100),
      setTimeout(() => setIsLineVisible(true), 200),
      setTimeout(() => setIsBackButtonVisible(true), 300)
    ];

    return () => timers.forEach(timer => clearTimeout(timer));
  }, []);

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 800));

    // Get credentials from environment variables
    const adminEmail = process.env.NEXT_PUBLIC_ADMIN_EMAIL;
    const adminPassword = process.env.NEXT_PUBLIC_ADMIN_PASSWORD;

    if (loginData.email === adminEmail && loginData.password === adminPassword) {
      setIsLoggedIn(true);
      router.push('/'); // Redirect to homepage
    } else {
      setError('Invalid credentials');
    }
    setIsLoading(false);
  };

  const fadeInUp = {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
    transition: { duration: 0.3 },
  }

  const staggerContainer = {
    animate: {
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  return (
    <>
      <Head>
        <title>Login - GSIM</title>
        <meta name="description" content="Login to Good Shepherd Institute of Music" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col min-h-screen">
        <div className="bg-black w-full overflow-x-hidden relative">
          <div className="container mx-auto px-4 py-8 flex flex-col relative z-10">
            <div className="relative -ml-2 sm:ml-0">
              {/* Back Button - precisely positioned */}
              <div className={`absolute left-0 top-1 transition-opacity duration-500 ${
                isBackButtonVisible ? "opacity-100" : "opacity-0"
              }`}>
                <BackButton className="h-8 w-8 sm:h-10 sm:w-10" />
              </div>
              
              {/* Heading - perfectly left-aligned as original */}
              <h2
                className={`text-4xl md:text-5xl xl:text-7xl font-thin text-white transition-opacity duration-500 ${
                  isHeadingVisible ? "opacity-100" : "opacity-0"
                } pl-12 sm:pl-14`}
              >
                LOGIN
              </h2>
            </div>
          </div>
        </div>
        
        <div className="bg-[#f5f5f7] w-full overflow-x-hidden relative flex-grow">
          {/* Animated doodle background */}
          <DoodleBackground />

          <div className="container mx-auto px-4 py-8 flex flex-col relative z-10">
            <div className="mb-6 relative px-4 sm:px-0">
              <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2, duration: 0.5 }}
                className="flex items-center justify-between"
              >
                <div className="w-24"></div> {/* Spacer for balance */}
                <div className="text-sm text-gray-500">Admin Access</div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, scaleX: 0 }}
                animate={{ opacity: 1, scaleX: 1 }}
                transition={{ delay: 0.3, duration: 0.5 }}
                className="h-1 bg-gray-200 rounded-full mt-4 mb-8 overflow-hidden"
              >
                <motion.div
                  className="h-full bg-[#0066cc] rounded-full"
                  initial={{ width: "0%" }}
                  animate={{ width: "100%" }}
                  transition={{ duration: 0.5 }}
                />
              </motion.div>

              <motion.h2
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4, duration: 0.5 }}
                className="text-3xl md:text-4xl font-medium mb-6 text-[#1d1d1f] text-center font-thin"
              >
                ADMIN LOGIN
              </motion.h2>
            </div>

            <div className="flex-grow relative z-20" ref={containerRef}>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="max-w-md mx-auto"
              >
                <Card className="border-none shadow-lg rounded-2xl overflow-hidden backdrop-blur-sm bg-white/90">
                  <CardContent className="p-8 space-y-6">
                    <motion.div 
                      variants={staggerContainer} 
                      initial="initial" 
                      animate="animate" 
                      className="space-y-6"
                    >
                      <motion.div variants={fadeInUp} className="space-y-2">
                        <Label className="text-[#1d1d1f] font-medium">Email Address</Label>
                        <div className="relative">
                          <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                          <Input
                            type="email"
                            placeholder="Enter admin email"
                            value={loginData.email}
                            onChange={(e) => setLoginData({...loginData, email: e.target.value})}
                            className="h-12 rounded-xl border-gray-300 focus:border-[#0066cc] focus:ring-[#0066cc] pl-10 transition-all duration-200"
                            required
                          />
                        </div>
                      </motion.div>

                      <motion.div variants={fadeInUp} className="space-y-2">
                        <Label className="text-[#1d1d1f] font-medium">Password</Label>
                        <div className="relative">
                          <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                          <Input
                            type="password"
                            placeholder="Enter admin password"
                            value={loginData.password}
                            onChange={(e) => setLoginData({...loginData, password: e.target.value})}
                            className="h-12 rounded-xl border-gray-300 focus:border-[#0066cc] focus:ring-[#0066cc] pl-10 transition-all duration-200"
                            required
                          />
                        </div>
                      </motion.div>

                      {error && (
                        <motion.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: "auto" }}
                          exit={{ opacity: 0, height: 0 }}
                          className="text-red-500 text-sm text-center"
                        >
                          {error}
                        </motion.div>
                      )}
                    </motion.div>

                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.6, duration: 0.5 }}
                    >
                      <Button
                        className="w-full mt-6 h-12 bg-[#0066cc] hover:bg-[#004499] text-white rounded-xl font-medium text-base transition-all duration-200 flex items-center justify-center gap-2"
                        onClick={handleLogin}
                        disabled={isLoading}
                      >
                        {isLoading ? (
                          <>
                            <svg
                              className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                              xmlns="http://www.w3.org/2000/svg"
                              fill="none"
                              viewBox="0 0 24 24"
                            >
                              <circle
                                className="opacity-25"
                                cx="12"
                                cy="12"
                                r="10"
                                stroke="currentColor"
                                strokeWidth="4"
                              ></circle>
                              <path
                                className="opacity-75"
                                fill="currentColor"
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                              ></path>
                            </svg>
                            Authenticating...
                          </>
                        ) : (
                          <>
                            Sign In
                            <ArrowRight className="h-4 w-4 ml-1" />
                          </>
                        )}
                      </Button>
                    </motion.div>
                  </CardContent>
                </Card>
              </motion.div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}-e 


File: ./src/components/ui/dialog.jsx
===================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
-e 


File: ./src/components/ui/review-card.jsx
===================
"use client"
import { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"

const ReviewCard = ({ review, index, activeIndex }) => {
  const isActive = index === activeIndex
  const cardRef = useRef(null)
  const [cardHeight, setCardHeight] = useState(0)

  useEffect(() => {
    if (cardRef.current) {
      setCardHeight(cardRef.current.offsetHeight)
    }

    // Update height on window resize
    const handleResize = () => {
      if (cardRef.current) {
        setCardHeight(cardRef.current.offsetHeight)
      }
    }

    window.addEventListener("resize", handleResize)
    return () => window.removeEventListener("resize", handleResize)
  }, [review])

  const variants = {
    initial: (direction) => {
      return {
        x: direction > 0 ? 50 : -50,
        opacity: 0,
        scale: 0.95,
      }
    },
    animate: {
      x: 0,
      opacity: 1,
      scale: 1,
      transition: {
        x: { type: "spring", stiffness: 300, damping: 20 },
        opacity: { duration: 0.2 },
      },
    },
    exit: (direction) => {
      return {
        x: direction > 0 ? -50 : 50,
        opacity: 0,
        scale: 0.95,
        transition: {
          x: { type: "spring", stiffness: 300, damping: 20 },
          opacity: { duration: 0.2 },
        },
      }
    },
  }

  return (
    <AnimatePresence custom={index - activeIndex} initial={false}>
      {isActive && (
        <motion.div
          key={index}
          ref={cardRef}
          custom={index - activeIndex}
          variants={variants}
          initial="initial"
          animate="animate"
          exit="exit"
          className="absolute w-full bg-white p-4 sm:p-5 md:p-6 rounded-lg shadow-lg"
          style={{
            top: 0,
            left: 0,
            right: 0,
            overflow: "hidden",
          }}
        >
          <div className="transition-opacity duration-300 opacity-100">
            <div className="flex items-center mb-3 md:mb-4">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-gray-300 rounded-full flex items-center justify-center overflow-hidden">
                {review.image ? (
                  <img
                    src={review.image || "/placeholder.svg"}
                    alt={review.username}
                    className="w-full h-full object-cover rounded-full"
                  />
                ) : (
                  <span className="text-sm md:text-lg">{review.username[0]}</span>
                )}
              </div>
              <div className="ml-3 md:ml-4">
                <h4 className="text-sm md:text-base font-medium">{review.username}</h4>
                <div className="flex">
                  {[...Array(review.stars)].map((_, i) => (
                    <span key={i} className="text-yellow-400 text-xs md:text-base">
                      ★
                    </span>
                  ))}
                </div>
              </div>
            </div>
            <p className="text-black text-sm md:text-base leading-relaxed">{review.review}</p>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}

export default ReviewCard-e 


File: ./src/components/ui/ImageCarousel.jsx
===================
"use client";
import React, { useState, useEffect } from 'react';

const ImageCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  const images = [
    '/schools/abrsm-logo.jpg',
    '/schools/lcm-logo.jpg',
    '/schools/mtb-logo.jpg',
    '/schools/rsl-logo.jpg',
    '/schools/trinity-logo.jpg'
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 2000);

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="relative w-full h-full overflow-hidden">
      {images.map((src, index) => (
        <div
          key={src}
          className={`absolute w-full h-full transform transition-all duration-700 ease-in-out ${
            index === currentIndex
              ? 'translate-x-0 opacity-100'
              : index < currentIndex
              ? '-translate-x-full opacity-0'
              : 'translate-x-full opacity-0'
          }`}
        >
          <img
            src={src}
            alt={`School logo ${index + 1}`}
            className="w-full h-full object-cover"
          />
        </div>
      ))}
    </div>
  );
};

export default ImageCarousel;-e 


File: ./src/components/ui/form.jsx
===================
"use client";
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

const FormFieldContext = React.createContext({})

const FormField = (
  {
    ...props
  }
) => {
  return (
    (<FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>)
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    (<FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>)
  );
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    (<Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props} />)
  );
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    (<Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props} />)
  );
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    (<p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props} />)
  );
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    (<p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}>
      {body}
    </p>)
  );
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
-e 


File: ./src/components/ui/input.jsx
===================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }
-e 


File: ./src/components/ui/select.jsx
===================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
-e 


File: ./src/components/ui/back-button.jsx
===================
import Link from "next/link";

const BackIcon = ({ className = "" }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24" 
    className={`w-12 h-12 text-white transform transition-transform hover:scale-110 ${className}`}
    shapeRendering="geometricPrecision"
  >
    <path 
      d="M13.83 18.83L7.17 12l6.66-6.83L14 4l-8 8 8 8z" 
      fill="currentColor"
      stroke="none"
    />
  </svg>
);

const BackButton = ({ 
  href = "/", 
  className = "",
  iconClassName = "mt-1" 
}) => {
  return (
    <Link 
      href={href} 
      className={`z-10 group self-center ${className}`}
    >
      <div className="relative inline-flex items-center">
        <BackIcon className={iconClassName} />
      </div>
    </Link>
  );
};

export default BackButton;-e 


File: ./src/components/ui/checkbox.jsx
===================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}>
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
-e 


File: ./src/components/ui/button.jsx
===================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }
-e 


File: ./src/components/ui/separator.jsx
===================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
-e 


File: ./src/components/ui/table.jsx
===================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
-e 


File: ./src/components/ui/phone-input.jsx
===================
"use client"

import * as React from "react"
import { Input } from "@/components/ui/input"
import PhoneInputWithCountry from "react-phone-number-input"

import "react-phone-number-input/style.css"

const PhoneInput = React.forwardRef((props, ref) => {
  return (
    <PhoneInputWithCountry
      {...props}
      international
      countryCallingCodeEditable={false}
      defaultCountry="US"
      className="flex"
      inputComponent={Input}
    />
  )
})
PhoneInput.displayName = "PhoneInput"

export { PhoneInput }-e 


File: ./src/components/ui/card.jsx
===================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-xl border bg-card text-card-foreground shadow", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
-e 


File: ./src/components/ui/doodle-background.jsx
===================
// src/components/ui/DoodleBackground.jsx
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Music, Piano, Guitar, Mic, Headphones } from 'lucide-react';

const DoodleBackground = () => {
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  if (!isClient) return null;

  // Color palette for different elements
  const colors = {
    musicNote: "#0066cc",      // Blue
    piano: "#cc0066",          // Pink
    guitar: "#00cc66",         // Green
    mic: "#cc6600",            // Orange
    headphones: "#6600cc",     // Purple
    circles: "#00cccc",        // Teal
    waves: "#cc0066",          // Pink
    floatingNotes: "#cc6600"   // Orange
  };

  const circles = [...Array(8)].map((_, i) => ({
    key: `circle-${i}`,
    width: 20 + Math.random() * 80,
    height: 20 + Math.random() * 80,
    left: `${Math.random() * 100}%`,
    top: `${Math.random() * 100}%`,
    delay: Math.random() * 5,
    duration: 10 + Math.random() * 10,
    x: Math.random() * 40 - 20,
    y: Math.random() * 40 - 20,
    opacity: 0.6 + Math.random() * 0.3
  }));

  const notes = [...Array(12)].map((_, i) => {
    const noteSymbols = ["♩", "♪", "♫", "♬", "𝄞"];
    return {
      key: `note-${i}`,
      randomNote: noteSymbols[Math.floor(Math.random() * noteSymbols.length)],
      fontSize: 20 + Math.random() * 30,
      left: `${Math.random() * 100}%`,
      top: `${Math.random() * 100}%`,
      rotate: Math.random() * 360,
      x: Math.random() * 50 - 25,
      duration: 15 + Math.random() * 10,
      delay: Math.random() * 10,
      opacity: 0.7 + Math.random() * 0.2
    };
  });

  return (
    <div className="absolute inset-0 w-full h-full overflow-hidden pointer-events-none z-0">
      {/* Music notes - Blue */}
      <motion.div
        className="absolute top-[10%] left-[5%]"
        style={{ color: `${colors.musicNote}/30` }}
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{
          scale: [0.8, 1, 0.8],
          opacity: [0, 0.9, 0],
          y: [-10, 10, -10],
        }}
        transition={{
          repeat: Number.POSITIVE_INFINITY,
          duration: 8,
          ease: "easeInOut",
        }}
      >
        <Music size={80} />
      </motion.div>

      {/* Piano keys - Pink */}
      <motion.div
        className="absolute top-[30%] right-[8%]"
        style={{ color: `${colors.piano}/30` }}
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{
          scale: [0.8, 1, 0.8],
          opacity: [0, 0.8, 0],
          rotate: [0, 5, 0],
        }}
        transition={{
          repeat: Number.POSITIVE_INFINITY,
          duration: 10,
          ease: "easeInOut",
          delay: 1,
        }}
      >
        <Piano size={100} />
      </motion.div>

      {/* Guitar - Green */}
      <motion.div
        className="absolute bottom-[15%] left-[10%]"
        style={{ color: `${colors.guitar}/30` }}
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{
          scale: [0.8, 1, 0.8],
          opacity: [0, 0.7, 0],
          rotate: [0, -5, 0],
        }}
        transition={{
          repeat: Number.POSITIVE_INFINITY,
          duration: 12,
          ease: "easeInOut",
          delay: 2,
        }}
      >
        <Guitar size={90} />
      </motion.div>

      {/* Microphone - Orange */}
      <motion.div
        className="absolute top-[60%] right-[12%]"
        style={{ color: `${colors.mic}/30` }}
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{
          scale: [0.8, 1, 0.8],
          opacity: [0, 0.8, 0],
          y: [10, -10, 10],
        }}
        transition={{
          repeat: Number.POSITIVE_INFINITY,
          duration: 9,
          ease: "easeInOut",
          delay: 3,
        }}
      >
        <Mic size={70} />
      </motion.div>

      {/* Headphones - Purple */}
      <motion.div
        className="absolute bottom-[30%] left-[20%]"
        style={{ color: `${colors.headphones}/30` }}
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{
          scale: [0.8, 1, 0.8],
          opacity: [0, 0.9, 0],
          rotate: [0, 10, 0],
        }}
        transition={{
          repeat: Number.POSITIVE_INFINITY,
          duration: 11,
          ease: "easeInOut",
          delay: 4,
        }}
      >
        <Headphones size={85} />
      </motion.div>

      {/* Abstract circles - Teal */}
      {circles.map((circle) => (
        <motion.div
          key={circle.key}
          className="absolute rounded-full"
          style={{
            width: circle.width,
            height: circle.height,
            left: circle.left,
            top: circle.top,
            background: `linear-gradient(to right, ${colors.circles}/20, ${colors.circles}/30)`
          }}
          initial={{ scale: 0, opacity: 0 }}
          animate={{
            scale: [0, 1, 0],
            opacity: [0, circle.opacity, 0],
            x: [0, circle.x, 0],
            y: [0, circle.y, 0],
          }}
          transition={{
            repeat: Number.POSITIVE_INFINITY,
            duration: circle.duration,
            ease: "easeInOut",
            delay: circle.delay,
          }}
        />
      ))}

      {/* Wavy lines - Pink */}
      <svg className="absolute w-full h-full opacity-30 pointer-events-none" xmlns="http://www.w3.org/2000/svg">
        <motion.path
          d="M0,100 C150,200 350,0 500,100 C650,200 850,0 1000,100 C1150,200 1350,0 1500,100"
          stroke={colors.waves}
          strokeWidth="2"
          fill="none"
          initial={{ pathLength: 0, opacity: 0 }}
          animate={{
            pathLength: [0, 1, 0],
            opacity: [0, 0.5, 0],
            y: [0, 20, 0],
          }}
          transition={{
            repeat: Number.POSITIVE_INFINITY,
            duration: 15,
            ease: "easeInOut",
          }}
        />
        <motion.path
          d="M0,300 C150,400 350,200 500,300 C650,400 850,200 1000,300 C1150,400 1350,200 1500,300"
          stroke={colors.waves}
          strokeWidth="2"
          fill="none"
          initial={{ pathLength: 0, opacity: 0 }}
          animate={{
            pathLength: [0, 1, 0],
            opacity: [0, 0.4, 0],
            y: [0, -20, 0],
          }}
          transition={{
            repeat: Number.POSITIVE_INFINITY,
            duration: 18,
            ease: "easeInOut",
            delay: 2,
          }}
        />
      </svg>

      {/* Floating music notes - Orange */}
      {notes.map((note) => (
        <motion.div
          key={note.key}
          className="absolute font-bold"
          style={{
            fontSize: note.fontSize,
            left: note.left,
            top: note.top,
            color: `${colors.floatingNotes}/40`
          }}
          initial={{ y: 100, opacity: 0 }}
          animate={{
            y: [100, -100],
            opacity: [0, note.opacity, 0],
            x: [0, note.x],
            rotate: [0, note.rotate],
          }}
          transition={{
            repeat: Number.POSITIVE_INFINITY,
            duration: note.duration,
            ease: "easeInOut",
            delay: note.delay,
          }}
        >
          {note.randomNote}
        </motion.div>
      ))}
    </div>
  );
};

export default DoodleBackground;-e 


File: ./src/components/ui/label.jsx
===================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
-e 


File: ./src/components/ui/scroll-area.jsx
===================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
-e 


File: ./src/lib/utils.js
===================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}
-e 


File: ./src/data/schools.js
===================
export const schools = {
    ABRSM: {
      logo: '/schools/abrsm-logo.jpg',
      title: 'ABRSM (Associated Board of the Royal Schools of Music) – UK',
      alt: 'ABRSM examination board logo',
    },
    Trinity: {
      logo: '/schools/trinity-logo.jpg',
      title: 'Trinity College London',
      alt: 'Trinity College London examination board logo',
    },
    LCM: {
      logo: '/schools/lcm-logo.jpg',
      title: 'London College of Music (LCM) – University of West London',
      alt: 'London College of Music examination board logo',
    },
    RSL: {
      logo: '/schools/rsl-logo.jpg',
      title: 'RSL Awards (Rockschool – RSL)',
      alt: 'RSL Awards examination board logo',
    },
    MTB: {
      logo: '/schools/mtb-logo.jpg',
      title: 'MTB Exams (Music Teachers\' Board)',
      alt: 'MTB Exams board logo',
    }
  };-e 


File: ./src/data/reviews.js
===================
export const reviews = [
    {
      username: "Adesh Priya",
      stars: 5,
      review: "It's a place where you will not just learn practical experience of each and every instrument, but also the theory behind it and the musicality origin and theme of your selected instrument. As a Piano and Western vocal student at GSIM institute, I really love and enjoy each of my classes."
    },
    {
      username: "Arun Menon",
      stars: 5,
      review: "Highly recommended. Tutors are very kind and passionate. Unlike other institutes, here the teaching methodology is liberal, providing more space for students to explore and be creative."
    },
    {
      username: "Swarna Nirmal",
      stars: 5,
      review: "GSIM center has a very good ambience to learn and teachers have vast experience...Friendly with kids and allow them to explore more in music... Rediscover MUSIC in GSIM"
    },
    {
      username: "Anita Agnes Lucia P",
      stars: 5,
      review: "Master Mcenrow is very humble, kind, friendly, and patient with my son. He has vast musical experience and is an excellent teacher. The highlight for me was hearing my son have a jam session with the teacher.",
      image: "/reviews/anita_agnes_lucia_p.png"
    },
    {
      username: "Adarsh Sasidharan",
      stars: 5,
      review: "I have been taking Violin classes at Good Shepherd Institute of Music for the past 8 months, and I am incredibly impressed with the quality of education that I have received. The teachers are incredibly knowledgeable and experienced."
    },
    {
      username: "Bowla Tk",
      stars: 5,
      review: "GSIM is the best music institute, and I'm very glad I found GSIM. MD Deva McEnrow John's hard work and dedication toward the institute is an inspiration to all. Everyone who works at GSIM is kind and caring toward kids."
    },
    {
      username: "John Prabhu",
      stars: 5,
      review: "My son is learning music in this school. I am completely satisfied with the way how the classes are taken.",
      image: "/reviews/john_prabhu.png"
    },
    {
      username: "Nihal Hari",
      stars: 5,
      review: "Good, my kids are enjoying their music learning because of the way they are teaching.",
      image: "/reviews/nihal_hari.png"
    },
    {
      username: "Mono",
      stars: 5,
      review: "I am really happy to be a part of student in good shepherd🤩the teachers are very friendly,kind and there teaching is very professional !!! If you want to grow in music, then it is a right place to grow 👍👍",
      image: "/reviews/mono.png"
    }
  ];-e 


File: ./src/data/examBoards.js
===================
export const examBoards = {
    ABRSM: {
      logo: '/schools/abrsm-logo.jpg',
      title: 'ABRSM (Associated Board of the Royal Schools of Music) – UK',
      content: {
        overview: 'ABRSM is one of the most widely recognized music examination boards in the world, affiliated with prestigious UK conservatoires such as the Royal Academy of Music and the Royal College of Music.',
        offerings: [
          'Graded music exams (Grades 1–8)',
          'Performance Grades (online assessments)',
          'Theory exams (Grades 1–8)',
          'Diplomas (ARSM, DipABRSM, LRSM, FRSM)',
          'Music Medals for beginners'
        ],
        strengths: [
          'Strong focus on classical music',
          'Internationally respected syllabus',
          'High-quality examiners and assessment standards'
        ],
        bestFor: 'Students pursuing a structured and rigorous classical music education.'
      }
    },
    Trinity: {
      logo: '/schools/trinity-logo.jpg',
      title: 'Trinity College London',
      content: {
        overview: 'Trinity College London offers a flexible and contemporary approach to music assessment, with a strong emphasis on musical expression and stylistic diversity.',
        offerings: [
          'Graded exams (Grades 1–8)',
          'Performance certificates and diplomas (ATCL, LTCL, FTCL)',
          'Rock & Pop exams for modern musicians',
          'Theory and composition assessments'
        ],
        strengths: [
          'Flexible repertoire choices',
          'Practical, performance-based assessment style',
          'Strong recognition worldwide'
        ],
        bestFor: 'Students who want more freedom in repertoire selection and contemporary musicians.'
      }
    },
    LCM: {
      logo: '/schools/lcm-logo.jpg',
      title: 'London College of Music (LCM) – University of West London',
      content: {
        overview: 'LCM provides a comprehensive music exam system, covering classical, jazz, pop, and musical theatre.',
        offerings: [
          'Classical music exams (Grades 1–8)',
          'Pop, rock, and jazz exams',
          'Performance and teaching diplomas',
          'Music theory and composition assessments'
        ],
        strengths: [
          'Diverse syllabus covering multiple genres',
          'Recognized for contemporary music specializations',
          'Offers ensemble and music production exams'
        ],
        bestFor: 'Those seeking a broad range of musical styles, including jazz and pop.'
      }
    },
    RSL: {
      logo: '/schools/rsl-logo.jpg',
      title: 'RSL Awards (Rockschool – RSL)',
      content: {
        overview: 'Rockschool specializes in contemporary music assessments, focusing on rock, pop, and jazz instruments.',
        offerings: [
          'Graded exams in guitar, bass, drums, vocals, piano, and ukulele',
          'Popular music performance and production qualifications',
          'Theory exams with a modern approach',
          'Digital music and DJ skills certification'
        ],
        strengths: [
          'Ideal for contemporary musicians',
          'Backing tracks and improvisation encouraged',
          'Practical and industry-relevant assessments'
        ],
        bestFor: 'Students interested in pop, rock, jazz, and digital music.'
      }
    },
    MTB: {
      logo: '/schools/mtb-logo.jpg',
      title: 'MTB Exams (Music Teachers\' Board)',
      content: {
        overview: 'MTB provides online music exams, allowing students to take assessments remotely.',
        offerings: [
          'Graded exams (1–8)',
          'Performance and diploma qualifications',
          'Theory exams available online'
        ],
        strengths: [
          'Fully online assessment model',
          'Flexible and convenient for students worldwide'
        ],
        bestFor: 'Students who prefer online assessments.'
      }
    }
  };-e 


File: ./src/pages/terms-and-conditions.jsx
===================
'use client';
import { useState, useEffect } from 'react';
import Head from 'next/head';
import BackButton from "@/components/ui/back-button";
import "../app/globals.css";

const TermsAndConditions = () => {
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);
  const [isHeaderVisible, setIsHeaderVisible] = useState(false);
  const [isIntroVisible, setIsIntroVisible] = useState(false);
  const [isTermsVisible, setIsTermsVisible] = useState(false);
  const [isContactVisible, setIsContactVisible] = useState(false);

  const terms = [
    "Classes are subject to availability.",
    "Payment must be made in advance for course enrollment.",
    "Any changes or cancellations to the course schedule must be communicated in advance.",
    "Students must adhere to the institute's code of conduct.",
    "Course materials provided are for personal use only.",
    "Regular attendance is expected for optimal learning outcomes.",
    "The institute reserves the right to modify class schedules when necessary.",
    "Students are responsible for their own musical instruments unless otherwise specified.",
    "Recording of classes is not permitted without prior permission.",
    "Fees once paid are non-refundable."
  ];

  useEffect(() => {
    const timers = [
      setTimeout(() => setIsHeaderVisible(true), 100),
      setTimeout(() => setIsIntroVisible(true), 200),
      setTimeout(() => setIsTermsVisible(true), 300),
      setTimeout(() => setIsContactVisible(true), 400),
      setTimeout(() => setIsBackButtonVisible(true), 500)
    ];

    return () => timers.forEach(timer => clearTimeout(timer));
  }, []);

  return (
    <>
      <Head>
        <title>Terms and Conditions - GSIM</title>
        <meta name="description" content="Terms and conditions for Good Shepherd Institute of Music" />
      </Head>

      <div className="bg-black text-white min-h-screen py-12">
        <div className="container mx-auto px-4">
          {/* Back Button */}
          <div className={`absolute left-0 top-10 sm:left-6 transition-opacity duration-500 ${isBackButtonVisible ? "opacity-100" : "opacity-0"}`}>
            <BackButton />
          </div>

          {/* Main Content */}
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <div className={`text-center mb-12 transition-opacity duration-500 ${isHeaderVisible ? "opacity-100" : "opacity-0"}`}>
              <h2 className="text-4xl md:text-5xl font-thin mb-4">Terms and Conditions</h2>
              <p className="text-gray-400">Last updated: March 2025</p>
            </div>

            {/* Introduction */}
            <div className={`mb-12 bg-white/5 p-6 rounded-xl backdrop-blur-sm transition-opacity duration-500 ${isIntroVisible ? "opacity-100" : "opacity-0"}`}>
              <p className="text-gray-300 leading-relaxed">
                By enrolling in courses or using services provided by Good Shepherd Institute of Music, 
                you agree to comply with and be bound by the following terms and conditions. 
                Please read these carefully before proceeding with registration.
              </p>
            </div>

            {/* Terms List */}
            <div className="space-y-4 mb-12">
              {terms.map((term, index) => (
                <div
                  key={index}
                  className={`flex items-start p-6 rounded-xl bg-white/5 backdrop-blur-sm hover:bg-white/10 transition-all duration-300 ${
                    isTermsVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4"
                  }`}
                  style={{ transitionDelay: `${index * 50}ms` }}
                >
                  <div className="flex-shrink-0 w-8 h-8 bg-white/10 rounded-full flex items-center justify-center mr-4">
                    <span className="text-white font-semibold">{index + 1}</span>
                  </div>
                  <p className="text-gray-300">{term}</p>
                </div>
              ))}
            </div>

            {/* Contact Section */}
            <div className={`bg-gradient-to-br from-white/10 to-white/5 p-8 rounded-xl backdrop-blur-sm transition-opacity duration-500 ${
              isContactVisible ? "opacity-100" : "opacity-0"
            }`}>
              <h3 className="text-2xl font-thin text-white mb-4">Questions or Concerns?</h3>
              <p className="text-gray-400 mb-6">
                If you have any questions about these terms or need clarification, please don't hesitate to contact us:
              </p>
              <div className="flex flex-col sm:flex-row gap-4">
                <a 
                  href="tel:+919884556997"
                  className="inline-flex items-center px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-300"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  +91 98845 56997
                </a>
                <a 
                  href="mailto:goodshepherdim@gmail.com"
                  className="inline-flex items-center px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-300"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  Email Us
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default TermsAndConditions;-e 


File: ./src/pages/privacy-policy.jsx
===================
'use client';
import { useState, useEffect } from 'react';
import Head from 'next/head';
import BackButton from "@/components/ui/back-button";
import "../app/globals.css";

const PrivacyPolicy = () => {
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);
  const [isHeaderVisible, setIsHeaderVisible] = useState(false);
  const [isContentVisible, setIsContentVisible] = useState(false);
  const [isContactVisible, setIsContactVisible] = useState(false);

  useEffect(() => {
    const timers = [
      setTimeout(() => setIsHeaderVisible(true), 100),
      setTimeout(() => setIsContentVisible(true), 200),
      setTimeout(() => setIsContactVisible(true), 300),
      setTimeout(() => setIsBackButtonVisible(true), 400)
    ];

    return () => timers.forEach(timer => clearTimeout(timer));
  }, []);

  return (
    <>
      <Head>
        <title>Privacy Policy - GSIM</title>
        <meta name="description" content="Privacy policy for Good Shepherd Institute of Music" />
      </Head>

      <div className="bg-black text-white min-h-screen py-12">
        <div className="container mx-auto px-4">
          {/* Back Button */}
          <div className={`absolute left-4 top-10 sm:left-6 transition-opacity duration-500 ${isBackButtonVisible ? "opacity-100" : "opacity-0"}`}>
            <BackButton />
          </div>

          {/* Main Content */}
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <div className={`text-center mb-12 transition-opacity duration-500 ${isHeaderVisible ? "opacity-100" : "opacity-0"}`}>
              <h2 className="text-4xl md:text-5xl font-thin mb-4">Privacy Policy</h2>
              <p className="text-gray-400">Last updated: March 2025</p>
            </div>

            {/* Content Sections */}
            <div className="space-y-8 mb-12">
              {sections.map((section, index) => (
                <div
                  key={section.title}
                  className={`bg-white/5 p-6 rounded-xl backdrop-blur-sm transition-opacity duration-500 ${
                    isContentVisible ? "opacity-100" : "opacity-0"
                  }`}
                  style={{ transitionDelay: `${index * 50}ms` }}
                >
                  <h3 className="text-2xl font-thin text-white mb-4">
                    {section.title}
                  </h3>
                  <div className="space-y-4 text-gray-300">
                    {section.content.map((paragraph, pIndex) => (
                      <div 
                        key={pIndex}
                        className="hover:bg-white/10 p-4 rounded-lg transition-all duration-300"
                      >
                        {paragraph}
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>

            {/* Contact Section */}
            <div className={`bg-gradient-to-br from-white/10 to-white/5 p-8 rounded-xl backdrop-blur-sm transition-opacity duration-500 ${
              isContactVisible ? "opacity-100" : "opacity-0"
            }`}>
              <h3 className="text-2xl font-thin text-white mb-4">Questions and Contact Information</h3>
              <p className="text-gray-400 mb-6">
                If you would like to access, correct, amend, or delete any personal information we have about you, 
                please contact our Privacy Compliance Officer at:
              </p>
              <div className="flex flex-col sm:flex-row gap-4">
                <a 
                  href="tel:+919884556997"
                  className="inline-flex items-center px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-300"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  +91 98845 56997
                </a>
                <a 
                  href="mailto:goodshepherdim@gmail.com"
                  className="inline-flex items-center px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-300"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  Email Us
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

const sections = [
  {
    title: "WHAT DO WE DO WITH YOUR INFORMATION?",
    content: [
      <p key="1">When you register for a course or participate in an event at Good Shepherd Institute of Music, we collect personal information such as your name, email address, phone number, date of birth, and any other details necessary for enrollment and communication.</p>,
      <p key="2">When you browse our website, we may automatically receive your computer's internet protocol (IP) address in order to help us understand your browser and operating system for improved user experience.</p>,
      <p key="3">Email marketing (if applicable): With your permission, we may send you emails about upcoming events, courses, and other updates related to the institute.</p>
    ]
  },
  {
    title: "CONSENT",
    content: [
      <div key="1">
        <h4 className="font-semibold mb-2 text-white">How do you get my consent?</h4>
        <p>When you provide us with personal information to register for courses, communicate with us, or participate in any event, we imply that you consent to our collecting it and using it for those specific purposes.</p>
      </div>,
      <div key="2">
        <h4 className="font-semibold mb-2 text-white">How do I withdraw my consent?</h4>
        <p>If you change your mind after opting-in, you can withdraw your consent by contacting us.</p>
      </div>
    ]
  },
];

export default PrivacyPolicy;-e 


File: ./src/pages/exams.jsx
===================
import { useState, useEffect } from "react";
import "../app/globals.css";
import ImageCarousel from "@/components/ui/ImageCarousel";
import Head from "next/head";
import Image from "next/image";
import { examBoards } from "@/data/examBoards";
import BackButton from "@/components/ui/back-button";

export default function ExamPage() {
  const [isCarouselVisible, setIsCarouselVisible] = useState(false);
  const [isContentVisible, setIsContentVisible] = useState(false);
  const [isHeadingVisible, setIsHeadingVisible] = useState(false);
  const [isLineVisible, setIsLineVisible] = useState(false);
  const [isExamSectionVisible, setIsExamSectionVisible] = useState(false);
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);
  const [activeBoard, setActiveBoard] = useState('ABRSM');

  // Animation timing sequence
  useEffect(() => {
    const timers = [
      setTimeout(() => setIsHeadingVisible(true), 100),      // Heading first
      setTimeout(() => setIsLineVisible(true), 200),        // Then line break
      setTimeout(() => setIsCarouselVisible(true), 300),   // Then carousel
      setTimeout(() => setIsContentVisible(true), 400),    // Then content
      setTimeout(() => setIsExamSectionVisible(true), 500),// Then exam section
      setTimeout(() => setIsBackButtonVisible(true), 600)  // Finally back button
    ];

    return () => timers.forEach(timer => clearTimeout(timer));
  }, []);

  return (
    <>
      <Head>
        <title>International Exam Boards - GSIM</title>
        <meta name="description" content="Explore our music exams from international boards like ABRSM, Trinity, LCM, MTB, and RSL." />
      </Head>

      <div className="bg-black text-white py-12 min-h-screen">
        <div className="container mx-auto px-4">
          {/* New Header Section */}
          <div className="mb-12">
            <div className="relative -ml-2 sm:ml-0 px-4 sm:px-0">
              {/* Back Button - updated positioning to match login page */}
              <div className={`absolute left-0 top-1 transition-opacity duration-500 ${
                isBackButtonVisible ? "opacity-100" : "opacity-0"
              }`}>
                <BackButton className="h-8 w-8 sm:h-10 sm:w-10" />
              </div>
              
              {/* Heading - updated to match login page's responsive behavior */}
              <h2 className={`text-4xl md:text-5xl xl:text-7xl font-thin text-white transition-opacity duration-500 ${
                isHeadingVisible ? "opacity-100" : "opacity-0"
              } pl-12 sm:pl-14`}>
                INTERNATIONAL EXAM BOARDS
              </h2>
              
              {/* Line Break - unchanged */}
              <hr className={`border-t border-white/20 mb-8 transition-opacity duration-500 ${
                isLineVisible ? "opacity-100" : "opacity-0"
              }`} />
            </div>
          </div>

          {/* Rest of the content remains exactly the same */}
          <div className="flex flex-wrap -mx-4">
            {/* Image Section (Carousel) */}
            <div className="w-full px-4 mb-8 md:mb-0 md:w-[41.66%] md:ml-[8.33%] lg:ml-0">
              <div className={`h-[300px] md:h-[400px] bg-gray-900 rounded-lg overflow-hidden transition-opacity duration-700 ${
                isCarouselVisible ? "opacity-100" : "opacity-0"
              }`}>
                <ImageCarousel />
              </div>
            </div>

            {/* Text Content */}
            <div className={`w-full px-4 md:w-[41.66%] md:ml-[8.33%] lg:ml-[16.66%] transition-opacity duration-700 ${
              isContentVisible ? "opacity-100" : "opacity-0"
            }`}>
              <div className="flex flex-col justify-center h-full space-y-4">
                <p className="text-lg text-gray-300">
                  We offer music exams from leading international boards: <strong>ABRSM</strong>, <strong>Trinity</strong>, <strong>LCM</strong>, <strong>MTB</strong>, and <strong>RSL</strong>.
                </p>
                <p className="text-lg text-gray-300">
                  Our syllabus follows the official guidelines of these boards, ensuring top-quality preparation for all levels.
                </p>
                <p className="text-lg text-gray-300">
                  Students receive globally recognized certifications upon passing their exams, providing them with valuable qualifications for their music career.
                </p>
              </div>
            </div>
          </div>

          {/* Exam Boards Section */}
          <div className={`transition-opacity duration-700 ${
            isExamSectionVisible ? "opacity-100" : "opacity-0"
          }`}>
            <div className="mt-20 mb-12">
              <div className="flex flex-col lg:flex-row gap-8 max-w-7xl mx-auto">
                {/* Logos Column */}
                <div className="w-full lg:w-1/3 sticky top-4 h-fit">
                  <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-1 gap-4">
                    {Object.entries(examBoards).map(([key, board]) => (
                      <button
                        key={key}
                        onClick={() => setActiveBoard(key)}
                        className={`group relative p-6 rounded-xl transition-all duration-500 transform hover:scale-105 hover:shadow-2xl ${
                          activeBoard === key 
                            ? 'bg-gradient-to-br from-white/15 to-white/5 shadow-xl scale-105' 
                            : 'bg-white/5 hover:bg-white/10'
                        }`}
                      >
                        <div className="relative h-20 w-full transition-transform duration-300 group-hover:-translate-y-1">
                          <Image
                            src={board.logo}
                            alt={`${key} logo`}
                            fill
                            className="object-contain filter transition-all duration-300 group-hover:brightness-125"
                          />
                        </div>
                        <div className={`h-0.5 bg-white/30 transform scale-x-0 transition-transform duration-500 mt-4 ${
                          activeBoard === key ? 'scale-x-100' : 'group-hover:scale-x-75'
                        }`} />
                      </button>
                    ))}
                  </div>
                </div>

                {/* Content Column */}
                <div className="w-full lg:w-2/3">
                  <div className="bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm rounded-xl p-8 shadow-xl lg:bg-white/10">
                    {/* Mobile Content */}
                    <div className="lg:hidden bg-black/85 rounded-xl p-6">
                      <div className="space-y-8 animate-slideUp">
                        <h3 className="text-3xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400">
                          {examBoards[activeBoard].title}
                        </h3>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Overview</h4>
                          <p className="text-gray-400 leading-relaxed">
                            {examBoards[activeBoard].content.overview}
                          </p>
                        </div>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Offerings</h4>
                          <ul className="space-y-3">
                            {examBoards[activeBoard].content.offerings.map((item, index) => (
                              <li key={index} className="flex items-start space-x-3 text-gray-400">
                                <span className="inline-block w-1.5 h-1.5 rounded-full bg-white/50 mt-2.5" />
                                <span>{item}</span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Key Strengths</h4>
                          <ul className="space-y-3">
                            {examBoards[activeBoard].content.strengths.map((item, index) => (
                              <li key={index} className="flex items-start space-x-3 text-gray-400">
                                <span className="inline-block w-1.5 h-1.5 rounded-full bg-white/50 mt-2.5" />
                                <span>{item}</span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Best For</h4>
                          <p className="text-gray-400 leading-relaxed">
                            {examBoards[activeBoard].content.bestFor}
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    {/* Desktop Content */}
                    <div className="hidden lg:block">
                      <div className="space-y-8 animate-slideUp">
                        <h3 className="text-3xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400">
                          {examBoards[activeBoard].title}
                        </h3>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Overview</h4>
                          <p className="text-gray-400 leading-relaxed">
                            {examBoards[activeBoard].content.overview}
                          </p>
                        </div>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Offerings</h4>
                          <ul className="space-y-3">
                            {examBoards[activeBoard].content.offerings.map((item, index) => (
                              <li key={index} className="flex items-start space-x-3 text-gray-400">
                                <span className="inline-block w-1.5 h-1.5 rounded-full bg-white/50 mt-2.5" />
                                <span>{item}</span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Key Strengths</h4>
                          <ul className="space-y-3">
                            {examBoards[activeBoard].content.strengths.map((item, index) => (
                              <li key={index} className="flex items-start space-x-3 text-gray-400">
                                <span className="inline-block w-1.5 h-1.5 rounded-full bg-white/50 mt-2.5" />
                                <span>{item}</span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div className="transform transition-all duration-500 hover:translate-x-2">
                          <h4 className="text-xl text-gray-300 mb-3">Best For</h4>
                          <p className="text-gray-400 leading-relaxed">
                            {examBoards[activeBoard].content.bestFor}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}-e 


File: ./src/pages/about-us.jsx
===================
import { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import BackButton from "@/components/ui/back-button";
import "../app/globals.css";

export default function AboutUsPage() {
  const [activeSection, setActiveSection] = useState('about');
  const [isLogoVisible, setIsLogoVisible] = useState(false);
  const [isTitleVisible, setIsTitleVisible] = useState(false);
  const [isTabsVisible, setIsTabsVisible] = useState(false);
  const [isContentVisible, setIsContentVisible] = useState(false);
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);

  useEffect(() => {
    const timers = [
      setTimeout(() => setIsLogoVisible(true), 100),       // Logo appears first
      setTimeout(() => setIsTitleVisible(true), 200),     // Title appears second
      setTimeout(() => setIsTabsVisible(true), 300),      // Tabs appear third
      setTimeout(() => setIsContentVisible(true), 400),   // Content appears fourth
      setTimeout(() => setIsBackButtonVisible(true), 500) // Back button appears last
    ];

    return () => timers.forEach(timer => clearTimeout(timer));
  }, []);

  return (
    <>
      <Head>
        <title>About Us - GSIM</title>
        <meta name="description" content="Learn more about GSIM - Good Shepherd Institute Of Music" />
      </Head>

      <div className="bg-black text-white min-h-screen">
        <div className="container mx-auto px-4 py-12">
          {/* Back Button */}
          <div className={`absolute left-6 top-6 transition-opacity duration-500 ${isBackButtonVisible ? "opacity-100" : "opacity-0"}`}>
            <BackButton />
          </div>

          {/* Hero Section */}
          <div className="flex flex-col items-center justify-center mb-16">
            <div className={`relative w-32 h-32 mb-8 transform transition-all duration-1000 hover:scale-110 ${
              isLogoVisible ? "opacity-100" : "opacity-0"
            }`}>
              <Image
                src="/GSIM_only_logo.png"
                alt="GSIM Logo"
                fill
                className="object-contain"
              />
            </div>
            <h1 className={`text-5xl md:text-7xl font-thin text-center mb-6 
              bg-gradient-to-r from-white via-gray-300 to-white bg-clip-text text-transparent
              transform transition-all duration-1000 hover:scale-105 ${
                isTitleVisible ? "opacity-100" : "opacity-0"
              }`}>
              ABOUT GSIM
            </h1>
          </div>

          {/* Navigation Tabs */}
          <div className={`flex justify-center gap-4 mb-12 transition-opacity duration-500 ${
            isTabsVisible ? "opacity-100" : "opacity-0"
          }`}>
            {['about', 'vision'].map((section) => (
              <button
                key={section}
                onClick={() => setActiveSection(section)}
                className={`px-8 py-3 text-lg rounded-full transition-all duration-500 transform
                  ${activeSection === section 
                    ? 'bg-white text-black scale-105 shadow-lg'
                    : 'bg-white/10 hover:bg-white/20'}`}
              >
                {section.charAt(0).toUpperCase() + section.slice(1)}
              </button>
            ))}
          </div>

          {/* Content Sections */}
          <div className={`max-w-4xl mx-auto transition-opacity duration-500 ${
            isContentVisible ? "opacity-100" : "opacity-0"
          }`}>
            {activeSection === 'about' && (
              <div className="space-y-8 animate-slideUp">
                <p className="text-xl text-gray-300 text-center leading-relaxed transform transition-all duration-500 hover:translate-x-2">
                  Welcome to Good Shepherd Music Institute (GSIM), one of Chennai's most respected music institutions! For over 5 years, GSIM has been dedicated to spreading the joy of music, nurturing talent, and cultivating excellence in students of all ages.
                </p>

                <div className="grid md:grid-cols-2 gap-8">
                  {[
                    "A generation ago, becoming a successful musician required a good ear, solid technique, sensitivity, and a strong work ethic. While these qualities are still vital, today's young musicians must bring even more to the table.",
                    "Whether you're an advanced student preparing for a career in music or a parent introducing your child to music for the first time, GSIM has something special for you.",
                    "As society evolves, so do its expectations of artists. Collaboration is now the key. Musicians can no longer simply exist in the world—they must actively engage with it.",
                    "We invite you to explore the many opportunities an education at GSIM offers. We hope you find success in your musical journey with us."
                  ].map((text, index) => (
                    <div 
                      key={index}
                      className="bg-white/5 p-6 rounded-xl backdrop-blur-sm
                        transform transition-all duration-500 hover:scale-105 hover:bg-white/10"
                    >
                      <p className="text-gray-300">{text}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeSection === 'vision' && (
              <div className="space-y-8 animate-slideUp">
                <div className="bg-gradient-to-br from-white/10 to-transparent p-8 rounded-xl mb-12
                  transform transition-all duration-500 hover:translate-y-[-4px]">
                  <h3 className="text-2xl text-center font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-white to-gray-400">
                    Our Vision
                  </h3>
                  <p className="text-xl text-gray-300 text-center">
                    To inspire individuals to think musically and make a difference in the world.
                  </p>
                </div>

                <div className="grid md:grid-cols-2 gap-8">
                  {[
                    {
                      title: "Excellence",
                      content: "We cultivate greatness by offering rigorous education and holding students to the highest standards of excellence."
                    },
                    {
                      title: "Innovation",
                      content: "We challenge our students to not only follow established paths but to lead the way, creating new opportunities."
                    },
                    {
                      title: "Community",
                      content: "Our diverse community allows different perspectives to expand minds and enrich experiences."
                    },
                    {
                      title: "Impact",
                      content: "We mold students into extraordinary musicians and people who create positive change through their music."
                    }
                  ].map((item, index) => (
                    <div 
                      key={index}
                      className="bg-white/5 p-6 rounded-xl backdrop-blur-sm
                        transform transition-all duration-500 hover:scale-105 hover:bg-white/10"
                    >
                      <h4 className="text-xl font-semibold mb-3 text-white/90">{item.title}</h4>
                      <p className="text-gray-300">{item.content}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
}-e 


File: ./src/pages/cancellations-and-refunds.jsx
===================
'use client';
import { useState, useEffect } from 'react';
import Head from 'next/head';
import BackButton from "@/components/ui/back-button";
import "../app/globals.css";

const CancellationsAndRefunds = () => {
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);
  const [isHeaderVisible, setIsHeaderVisible] = useState(false);
  const [isIntroVisible, setIsIntroVisible] = useState(false);
  const [isTermsVisible, setIsTermsVisible] = useState(false);
  const [isContactVisible, setIsContactVisible] = useState(false);

  const terms = [
    "Our policy lasts 30 days. If 30 days have gone by since your purchase, unfortunately, we can't offer you a refund or exchange.",
    "To be eligible for a return, your item must be unused and in the same condition that you received it. It must also be in the original packaging.",
    "Perishable goods, intimate or sanitary items, hazardous materials, and gift cards are non-returnable.",
    "Refunds are processed after inspection of the returned item, and a credit will be applied to the original payment method.",
    "Sale items cannot be refunded.",
    "We only replace items if they are defective or damaged. Contact us for exchanges."
  ];

  useEffect(() => {
    const timers = [
      setTimeout(() => setIsHeaderVisible(true), 100),
      setTimeout(() => setIsIntroVisible(true), 200),
      setTimeout(() => setIsTermsVisible(true), 300),
      setTimeout(() => setIsContactVisible(true), 400),
      setTimeout(() => setIsBackButtonVisible(true), 500)
    ];

    return () => timers.forEach(timer => clearTimeout(timer));
  }, []);

  return (
    <>
      <Head>
        <title>Cancellations and Refunds - GSIM</title>
        <meta name="description" content="Cancellations and refunds policy for Good Shepherd Institute of Music" />
      </Head>

      <div className="bg-black text-white min-h-screen py-12">
        <div className="container mx-auto px-4">
          {/* Back Button */}
          <div className={`absolute left-2 top-10 sm:left-6 transition-opacity duration-500 ${isBackButtonVisible ? "opacity-100" : "opacity-0"}`}>
            <BackButton />
          </div>

          {/* Main Content */}
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <div className={`text-center mb-12 transition-opacity duration-500 ${isHeaderVisible ? "opacity-100" : "opacity-0"}`}>
              <h2 className="text-4xl md:text-5xl font-thin mb-4">Cancellations and Refunds</h2>
              <p className="text-gray-400">Last updated: March 2025</p>
            </div>

            {/* Introduction */}
            <div className={`mb-12 bg-white/5 p-6 rounded-xl backdrop-blur-sm transition-opacity duration-500 ${isIntroVisible ? "opacity-100" : "opacity-0"}`}>
              <p className="text-gray-300 leading-relaxed">
                By enrolling in a course or purchasing goods from Good Shepherd Institute of Music, you agree to abide by our cancellations and refund policies. Please read them carefully.
              </p>
            </div>

            {/* Terms List */}
            <div className="space-y-4 mb-12">
              {terms.map((term, index) => (
                <div
                  key={index}
                  className={`flex items-start p-6 rounded-xl bg-white/5 backdrop-blur-sm hover:bg-white/10 transition-all duration-300 ${
                    isTermsVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4"
                  }`}
                  style={{ transitionDelay: `${index * 50}ms` }}
                >
                  <div className="flex-shrink-0 w-8 h-8 bg-white/10 rounded-full flex items-center justify-center mr-4">
                    <span className="text-white font-semibold">{index + 1}</span>
                  </div>
                  <p className="text-gray-300">{term}</p>
                </div>
              ))}
            </div>

            {/* Contact Section */}
            <div className={`bg-gradient-to-br from-white/10 to-white/5 p-8 rounded-xl backdrop-blur-sm transition-opacity duration-500 ${
              isContactVisible ? "opacity-100" : "opacity-0"
            }`}>
              <h3 className="text-2xl font-thin text-white mb-4">Questions or Concerns?</h3>
              <p className="text-gray-400 mb-6">
                If you have any questions about these terms or need clarification, please don't hesitate to contact us:
              </p>
              <div className="flex flex-col sm:flex-row gap-4">
                <a 
                  href="tel:+919884556997"
                  className="inline-flex items-center px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-300"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  +91 98845 56997
                </a>
                <a 
                  href="mailto:goodshepherdim@gmail.com"
                  className="inline-flex items-center px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-300"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  Email Us
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default CancellationsAndRefunds;-e 


File: ./src/pages/results.jsx
===================
import "../app/globals.css";
import { useState, useEffect, useCallback } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Search, Loader2, Award, Music, CheckCircle2 } from "lucide-react";
import BackButton from "@/components/ui/back-button";
import { schools } from '@/data/schools';
import Head from "next/head";
import Image from "next/image";

const ExamResults = () => {
  const [studentId, setStudentId] = useState("");
  const [studentData, setStudentData] = useState(null);
  const [error, setError] = useState("");
  const [allData, setAllData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const [activeSchool, setActiveSchool] = useState('ABRSM');
  const [isHeadingVisible, setIsHeadingVisible] = useState(false);
  const [isLineVisible, setIsLineVisible] = useState(false);
  const [areLogosVisible, setAreLogosVisible] = useState(Array(5).fill(false));
  const [isSearchVisible, setIsSearchVisible] = useState(false);
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);
  const [showCelebration, setShowCelebration] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);
  const [isResultExpanded, setIsResultExpanded] = useState(false);

  const getResultStatus = useCallback((score) => {
    if (score < 60) return {
      text: "Under Pass",
      color: "bg-red-500 text-white",
      gradient: "from-red-500 to-red-600",
      icon: "🔴",
      message: "Don't worry, keep practicing! You'll improve.",
      svgColor: "#ef4444"
    };
    if (score < 75) return {
      text: "Pass",
      color: "bg-green-500 text-white",
      gradient: "from-green-500 to-green-600",
      icon: "✅",
      message: "Congratulations on passing your exam!",
      svgColor: "#22c55e"
    };
    if (score < 87) return {
      text: "Merit",
      color: "bg-yellow-500 text-white",
      gradient: "from-yellow-500 to-yellow-600",
      icon: "⭐",
      message: "Well done! You achieved merit status.",
      svgColor: "#eab308"
    };
    return {
      text: "Distinction",
      color: "bg-purple-500 text-white",
      gradient: "from-purple-500 to-purple-600",
      icon: "🏆",
      message: "Outstanding! You achieved distinction!",
      svgColor: "#a855f7"
    };
  }, []);

  useEffect(() => {
    const timers = [
      setTimeout(() => setIsHeadingVisible(true), 100),
      setTimeout(() => setIsLineVisible(true), 200),
      ...Object.keys(schools).map((_, i) => 
        setTimeout(() => {
          setAreLogosVisible(prev => {
            const newState = [...prev];
            newState[i] = true;
            return newState;
          });
        }, 300 + (i * 100))
      ),
      setTimeout(() => setIsSearchVisible(true), 800),
      setTimeout(() => setIsBackButtonVisible(true), 900)
    ];

    return () => timers.forEach(timer => clearTimeout(timer));
  }, []);

  useEffect(() => {
    const abortController = new AbortController();
    
    const fetchData = async () => {
      try {
        const response = await fetch(`/api/results?school=${activeSchool.toLowerCase()}`, {
          signal: abortController.signal
        });
        if (!response.ok) throw new Error("Failed to fetch data");
        const jsonData = await response.json();
        setAllData(jsonData);
      } catch (err) {
        if (err.name !== 'AbortError') {
          console.error("Error fetching data:", err);
          setError("Error loading exam data.");
        }
      }
    };

    fetchData();
    return () => abortController.abort();
  }, [activeSchool]);

  const handleSuccessfulResult = useCallback(() => {
    setShowCelebration(false);
    setShowConfetti(false);
    setIsResultExpanded(false);
    setTimeout(() => setShowCelebration(true), 300);
    setTimeout(() => setShowConfetti(true), 600);
    setTimeout(() => setIsResultExpanded(true), 900);
  }, []);

  const handleSearch = useCallback(() => {
    if (!studentId.trim()) return;
  
    setIsLoading(true);
    setError("");
    setStudentData(null);

    const searchTimer = setTimeout(() => {
      const normalizedStudentId = studentId.trim().toLowerCase();
      const result = allData.find(
        (item) => item.ID.toLowerCase().trim() === normalizedStudentId
      );
  
      if (result) {
        setStudentData(result);
        handleSuccessfulResult();
      } else {
        setError("No results found for this ID");
      }
      setIsLoading(false);
    }, 500);

    return () => clearTimeout(searchTimer);
  }, [studentId, allData, handleSuccessfulResult]);

  const generateConfettiParticles = () => {
    const particles = [];
    const colors = ['#FFC700', '#FF0055', '#2BD1FC', '#F19CBB', '#a855f7'];
    
    for (let i = 0; i < 50; i++) {
      const size = Math.random() * 8 + 4;
      const color = colors[Math.floor(Math.random() * colors.length)];
      const left = Math.random() * 100;
      const animationDuration = Math.random() * 3 + 2;
      const delay = Math.random() * 0.5;
      
      particles.push(
        <div 
          key={i}
          className="absolute opacity-0 rounded-sm" 
          style={{
            width: `${size}px`,
            height: `${size}px`,
            backgroundColor: color,
            left: `${left}%`,
            top: '-20px',
            animation: `fallDown ${animationDuration}s ease-out ${delay}s forwards`,
          }}
        />
      );
    }
    
    return particles;
  };

  const CelebrationSVG = ({ color }) => (
    <svg 
      className="absolute animate-spin-slow z-0 opacity-20" 
      viewBox="0 0 100 100" 
      width="400" 
      height="400" 
      style={{
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
      }}
    >
      <defs>
        <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor={color} stopOpacity="0.6" />
          <stop offset="100%" stopColor="#ffffff" stopOpacity="0.1" />
        </linearGradient>
      </defs>
      <g>
        {[...Array(12)].map((_, i) => (
          <path 
            key={i} 
            d="M50 5 L55 20 L50 15 Z" 
            fill="url(#grad)" 
            transform={`rotate(${i * 30} 50 50)`} 
            opacity="0.9"
            className="animate-pulse"
            style={{ animationDelay: `${i * 0.1}s` }}
          />
        ))}
      </g>
    </svg>
  );

  const MusicNotes = () => (
    <>
      {[...Array(8)].map((_, i) => {
        const isEighthNote = i % 2 === 0;
        const left = 10 + (i * 10);
        const delay = i * 0.2;
        const size = 16 + Math.random() * 8;
        
        return (
          <div 
            key={i}
            className="absolute z-20 text-white opacity-0"
            style={{
              left: `${left}%`,
              top: '100%',
              fontSize: `${size}px`,
              animation: `floatUp 4s ease-out ${delay}s infinite`,
            }}
          >
            {isEighthNote ? '♪' : '♫'}
          </div>
        );
      })}
    </>
  );

  return (
    <>
      <Head>
        <title>Exam Results - GSIM</title>
        <meta name="description" content="Check your music exam results from international boards like ABRSM, Trinity, LCM, MTB, and RSL." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
  
      <div className="bg-black text-white min-h-screen py-12">
        <div className="container mx-auto px-4">
          {/* Header Section */}
          <div className="mb-12">
            <div className="relative -ml-2 sm:ml-0 px-4 sm:px-0">
              <div className={`absolute left-0 -top-3 sm:top-1 transition-opacity duration-500 ${
                isBackButtonVisible ? "opacity-100" : "opacity-0"
              }`}>
                <BackButton className="h-8 w-8 sm:h-10 sm:w-10" />
              </div>
              
              <h2 className={`text-4xl md:text-5xl xl:text-7xl font-thin text-white transition-opacity duration-500 ${
                isHeadingVisible ? "opacity-100" : "opacity-0"
              } pl-12 sm:pl-14`}>
                EXAM RESULTS
              </h2>
              
              <hr className={`border-t border-white/20 mb-8 transition-opacity duration-500 ${
                isLineVisible ? "opacity-100" : "opacity-0"
              }`} />
            </div>
          </div>
    
          {/* Main Content */}
          <div className="max-w-7xl mx-auto relative">
            {/* School Logos */}
            <div className="flex flex-col items-center justify-center mb-10 relative z-10">
              {/* Desktop and Tablet Layout */}
              <div className="hidden sm:flex items-center justify-center gap-4 lg:gap-8 flex-wrap">
                {Object.entries(schools).map(([key, school], index) => (
                  <button
                    key={key}
                    onClick={() => setActiveSchool(key)}
                    aria-label={`View ${key} exam results`}
                    className={`group relative p-4 rounded-xl transition-all duration-500 transform hover:scale-105 hover:shadow-2xl ${
                      areLogosVisible[index] ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4"
                    } ${
                      activeSchool === key 
                        ? 'bg-gradient-to-br from-white/15 to-white/5 shadow-xl scale-105' 
                        : 'bg-white/5 hover:bg-white/10'
                    }`}
                  >
                    <div className="relative h-16 w-32 lg:h-24 lg:w-48 transition-transform duration-300 group-hover:-translate-y-1">
                      <Image
                        src={school.logo}
                        alt={school.alt}
                        fill
                        sizes="(max-width: 768px) 100px, (max-width: 1200px) 150px, 200px"
                        className="object-contain filter transition-all duration-300 group-hover:brightness-125"
                        priority={false}
                        loading="lazy"
                      />
                    </div>
                    <div className={`h-0.5 bg-white/30 transform scale-x-0 transition-transform duration-500 mt-2 ${
                      activeSchool === key ? 'scale-x-100' : 'group-hover:scale-x-75'
                    }`} />
                  </button>
                ))}
              </div>

              {/* Mobile Layout */}
              <div className="sm:hidden flex overflow-x-auto w-full justify-start px-4 space-x-4 pb-4">
                {Object.entries(schools).map(([key, school], index) => (
                  <button
                    key={key}
                    onClick={() => setActiveSchool(key)}
                    aria-label={`View ${key} exam results`}
                    className={`flex-shrink-0 group relative p-3 rounded-xl transition-all duration-500 transform hover:scale-105 hover:shadow-2xl ${
                      areLogosVisible[index] ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4"
                    } ${
                      activeSchool === key 
                        ? 'bg-gradient-to-br from-white/15 to-white/5 shadow-xl scale-105' 
                        : 'bg-white/5 hover:bg-white/10'
                    }`}
                  >
                    <div className="relative h-12 w-24 transition-transform duration-300 group-hover:-translate-y-1">
                      <Image
                        src={school.logo}
                        alt={school.alt}
                        fill
                        sizes="(max-width: 768px) 100px"
                        className="object-contain filter transition-all duration-300 group-hover:brightness-125"
                        priority={false}
                        loading="lazy"
                      />
                    </div>
                    <div className={`h-0.5 bg-white/30 transform scale-x-0 transition-transform duration-500 mt-2 ${
                      activeSchool === key ? 'scale-x-100' : 'group-hover:scale-x-75'
                    }`} />
                  </button>
                ))}
              </div>
            </div>
    
            {/* Search and Results Section */}
            <div className="max-w-2xl mx-auto relative z-10">
              {/* Search Section */}
              <div className={`mb-8 transition-opacity duration-500 ${
                isSearchVisible ? "opacity-100" : "opacity-0"
              }`}>
                <div className={`relative transition-all duration-300 ${isFocused ? "scale-105" : "scale-100"}`}>
                  <div className="relative">
                    <Input
                      type="text"
                      placeholder="Enter your Student ID"
                      value={studentId}
                      onChange={(e) => setStudentId(e.target.value)}
                      onKeyPress={(e) => e.key === "Enter" && handleSearch()}
                      onFocus={() => setIsFocused(true)}
                      onBlur={() => setIsFocused(false)}
                      aria-label="Student ID search input"
                      className={`w-full bg-gray-50 border-2 transition-all duration-300 text-gray-900 px-4 py-3 pr-12 rounded-xl ${
                        isFocused ? "border-blue-500 shadow-md" : "border-gray-200"
                      } placeholder:text-gray-400 focus:outline-none`}
                    />
                    <button
                      onClick={handleSearch}
                      disabled={isLoading}
                      aria-label="Search student results"
                      className={`absolute right-3 top-1/2 -translate-y-1/2 p-1 rounded-full transition-all duration-300 hover:bg-gray-100 ${
                        isLoading ? "cursor-not-allowed" : "cursor-pointer"
                      }`}
                    >
                      {isLoading ? (
                        <Loader2 className="h-5 w-5 text-blue-500 animate-spin" />
                      ) : (
                        <Search className="h-5 w-5 text-gray-400" />
                      )}
                    </button>
                  </div>
                </div>
              </div>
    
              {/* Results Display */}
              <div className={`transition-all duration-500 ${
                studentData || error ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4"
              }`}>
                {error && (
                  <div className="text-center text-red-600 bg-red-50 p-4 rounded-xl animate-fade-in">
                    {error}
                  </div>
                )}
    
                {studentData && (
                  <div className="relative">
                    {showCelebration && studentData.Score >= 60 && (
                      <>
                        <CelebrationSVG color={getResultStatus(studentData.Score).svgColor} />
                        <MusicNotes />
                        <div 
                          className="absolute inset-0 rounded-xl bg-transparent border-2 animate-pulse-ring z-0"
                          style={{ borderColor: getResultStatus(studentData.Score).svgColor }}
                        />
                        <div 
                          className="absolute inset-0 rounded-xl opacity-30 z-0"
                          style={{ 
                            background: `radial-gradient(circle, ${getResultStatus(studentData.Score).svgColor} 0%, rgba(0,0,0,0) 70%)`,
                          }}
                        />
                      </>
                    )}
                    
                    {showConfetti && studentData.Score >= 75 && (
                      <div className="absolute inset-0 overflow-hidden z-10 pointer-events-none">
                        {generateConfettiParticles()}
                      </div>
                    )}
                    
                    <div className={`result-card ${
                      isResultExpanded ? "transform-none" : "transform scale-95"
                    }`}>
                      <div className="space-y-6 animate-fade-in">
                        <div
                          className={`result-status-card ${getResultStatus(studentData.Score).gradient} ${
                            showCelebration ? "animate-shimmer" : ""
                          }`}
                          aria-live="polite"
                        >
                          {showCelebration && studentData.Score >= 75 && (
                            <div className="absolute -right-4 -top-4 opacity-20">
                              {studentData.Score >= 87 ? (
                                <Award size={80} className="animate-spin-slow text-white" />
                              ) : (
                                <Music size={80} className="animate-spin-slow text-white" />
                              )}
                            </div>
                          )}
                          
                          <div className="flex flex-col md:flex-row items-center justify-between text-white">
                            <div className="text-center md:text-left mb-4 md:mb-0">
                              <p className="text-lg opacity-90">Final Result</p>
                              <div className="flex items-center space-x-2">
                                <span className={`text-2xl font-bold transition-all duration-700 ${
                                  showCelebration ? "text-3xl" : "text-2xl"
                                }`}>
                                  {studentData.Score}%
                                </span>
                                <span className={`text-xl transition-all duration-700 ${
                                  showCelebration && studentData.Score >= 75 ? "animate-spin-slow" : ""
                                }`} aria-hidden="true">
                                  {getResultStatus(studentData.Score).icon}
                                </span>
                              </div>
                            </div>
                            <div className="text-center md:text-right">
                              <p className="text-sm opacity-90">Status</p>
                              <p className={`text-2xl font-bold transition-all duration-700 ${
                                showCelebration ? "text-3xl" : "text-2xl"
                              }`}>
                                {getResultStatus(studentData.Score).text}
                              </p>
                            </div>
                          </div>
                          
                          {showCelebration && (
                            <div className={`mt-2 text-center text-white opacity-0 transition-opacity duration-700 ${
                              isResultExpanded ? "opacity-90" : "opacity-0"
                            }`}>
                              <p>{getResultStatus(studentData.Score).message}</p>
                            </div>
                          )}
                        </div>
    
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div className="space-y-4">
                            <div className={`student-detail-card ${
                              isResultExpanded ? "translate-x-0 opacity-100" : "-translate-x-4 opacity-0"
                            }`} style={{ transitionDelay: "0.1s" }}>
                              <p className="text-gray-500 font-medium text-sm">Name</p>
                              <p>{studentData.Name}</p>
                            </div>
                            <div className={`student-detail-card ${
                              isResultExpanded ? "translate-x-0 opacity-100" : "-translate-x-4 opacity-0"
                            }`} style={{ transitionDelay: "0.2s" }}>
                              <p className="text-gray-500 font-medium text-sm">Type</p>
                              <p>{studentData.Type}</p>
                            </div>
                          </div>
                          <div className="space-y-4">
                            <div className={`student-detail-card ${
                              isResultExpanded ? "translate-x-0 opacity-100" : "translate-x-4 opacity-0"
                            }`} style={{ transitionDelay: "0.3s" }}>
                              <p className="text-gray-500 font-medium text-sm">Grade</p>
                              <p>{studentData.Grade}</p>
                            </div>
                            <div className={`student-detail-card ${
                              isResultExpanded ? "translate-x-0 opacity-100" : "translate-x-4 opacity-0"
                            }`} style={{ transitionDelay: "0.4s" }}>
                              <p className="text-gray-500 font-medium text-sm">Examination Board</p>
                              <p>{activeSchool}</p>
                            </div>
                          </div>
                        </div>
                        
                        {studentData.Score >= 60 && showCelebration && (
                          <div className={`flex justify-center mt-6 transition-all duration-700 ${
                            isResultExpanded ? "opacity-100 scale-100" : "opacity-0 scale-90"
                          }`} style={{ transitionDelay: "0.5s" }}>
                            <div className="achievement-badge">
                              <div className="relative z-10 flex items-center justify-center">
                                <CheckCircle2 size={40} className="text-white" />
                              </div>
                              <div className="absolute inset-0 bg-gradient-to-r from-blue-500/30 to-purple-500/30 animate-pulse-ring" />
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default ExamResults;-e 


File: ./src/pages/api/results.js
===================
import { google } from "googleapis";
import { JWT } from "google-auth-library";

export default async function handler(req, res) {
  try {
    // Extract the school query parameter from the request
    const { school } = req.query;

    console.log("Received school parameter:", school); // Debugging

    // Validate the school parameter
    if (!school) {
      return res.status(400).json({ error: "School parameter is required." });
    }

    // Map school names to their respective sheet names
    const schoolSheets = {
      abrsm: "results_abrsm",
      trinity: "results_trinity",
      lcm: "results_lcm",
      rsl: "results_rsl",
      mtb: "results_mtb",
    };

    // Get the sheet name for the requested school
    const sheetName = schoolSheets[school.toLowerCase()];

    if (!sheetName) {
      return res.status(400).json({ error: "Invalid school specified." });
    }

    // Load service account credentials
    const auth = new JWT({
      email: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL,
      key: process.env.NEXT_PUBLIC_GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
      scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
    });

    const sheets = google.sheets({ version: "v4", auth });

    const spreadsheetId = process.env.NEXT_PUBLIC_GOOGLE_SHEET_ID;
    const range = sheetName; // Use the sheet name for the requested school

    // Fetch data from Google Sheets
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range,
    });

    const data = response.data;

    if (data.values) {
      // Convert the data into JSON format
      const headers = data.values[0];
      const rows = data.values.slice(1);
      const jsonData = rows.map((row) => {
        const obj = {};
        row.forEach((cell, index) => {
          obj[headers[index]] = cell;
        });
        return obj;
      });

      // Send the data as a response
      res.status(200).json(jsonData);
    } else {
      res.status(404).json({ error: "No data found in the sheet." });
    }
  } catch (err) {
    console.error("Error fetching data:", err);
    res.status(500).json({ error: "Error loading exam data from Google Sheets." });
  }
}-e 


File: ./src/pages/api/register.js
===================
import { google } from 'googleapis';
import { JWT } from 'google-auth-library';

const auth = new JWT({
  email: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL,
  key: process.env.NEXT_PUBLIC_GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets({ version: 'v4', auth });

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    const {
      Name,
      'Activity Status': activityStatus,
      Gender,
      'School / College / Occupation': schoolOccupation,
      'E - mail': email,
      'Phone number': phoneNumber,
      'Residence Address': residenceAddress,
      'Type of Musical Instrument': instrumentType,
      'Date of Birth': dateOfBirth,
    } = req.body;

    // Validate and format date
    const parsedDateOfBirth = new Date(dateOfBirth);
    if (isNaN(parsedDateOfBirth)) {
      return res.status(400).json({ error: 'Invalid date format for Date of Birth' });
    }

    // Prepare the new row data
    const newRow = [
      Name,
      activityStatus || '',
      Gender,
      schoolOccupation || '',
      email || '',
      phoneNumber || '',
      residenceAddress || '',
      instrumentType || '',
      parsedDateOfBirth.toISOString().split('T')[0], // YYYY-MM-DD format
      new Date().toISOString(), // Submission timestamp
    ];

    // Get sheet metadata
    const { data: { sheets: sheetList } } = await sheets.spreadsheets.get({
      spreadsheetId: process.env.NEXT_PUBLIC_GOOGLE_SHEET_ID,
      fields: 'sheets(properties(sheetId,title))'
    });

    const admissionSheet = sheetList.find(s => s.properties.title === 'admissions');
    if (!admissionSheet) {
      throw new Error('Admissions sheet not found');
    }

    // Batch update request
    const requests = [
      // Insert new empty row at row 2 (below headers)
      {
        insertDimension: {
          range: {
            sheetId: admissionSheet.properties.sheetId,
            dimension: 'ROWS',
            startIndex: 1, // Row 2 (0-based)
            endIndex: 2
          },
          inheritFromBefore: false
        }
      },
      // Add new data to the inserted row
      {
        updateCells: {
          range: {
            sheetId: admissionSheet.properties.sheetId,
            startRowIndex: 1,
            endRowIndex: 2,
            startColumnIndex: 0,
            endColumnIndex: newRow.length
          },
          rows: [{
            values: newRow.map((value, index) => {
              // Special formatting for date columns (columns I and J)
              if (index === 8 || index === 9) { // Date of Birth and Timestamp columns
                return {
                  userEnteredValue: { stringValue: value },
                  userEnteredFormat: { numberFormat: { type: 'DATE', pattern: 'yyyy-mm-dd' } }
                };
              }
              return { userEnteredValue: { stringValue: value } };
            })
          }],
          fields: 'userEnteredValue,userEnteredFormat.numberFormat'
        }
      }
    ];

    // Execute batch update
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId: process.env.NEXT_PUBLIC_GOOGLE_SHEET_ID,
      resource: { requests }
    });

    return res.status(200).json({ 
      success: true,
      message: 'Admission recorded successfully at the top'
    });

  } catch (error) {
    console.error('Error storing admission:', error);
    return res.status(500).json({ 
      success: false,
      error: 'Failed to record admission',
      details: error.message 
    });
  }
}-e 


File: ./src/pages/api/getAdmissions.js
===================
import { google } from 'googleapis';
import { JWT } from 'google-auth-library';

// Google Sheets API credentials from environment variables
const GOOGLE_CLIENT_EMAIL = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL;
const GOOGLE_PRIVATE_KEY = process.env.NEXT_PUBLIC_GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n');
const GOOGLE_SHEET_ID = process.env.NEXT_PUBLIC_GOOGLE_SHEET_ID;
const SHEET_NAME = 'admissions'; // Name of the sheet where data is stored

// Authenticate with Google Sheets API
const auth = new JWT({
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_PRIVATE_KEY,
  scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'], // Read-only access
});

const sheets = google.sheets({ version: 'v4', auth });

// API route handler for fetching data
export default async function handler(req, res) {
  if (req.method === 'GET') {
    try {
      // Fetch data from the Google Sheet
      const response = await sheets.spreadsheets.values.get({
        spreadsheetId: GOOGLE_SHEET_ID,
        range: `${SHEET_NAME}!A1:Z`, // Fetch all rows and columns from the sheet
      });

      const data = response.data.values;

      if (!data || data.length === 0) {
        return res.status(404).json({ error: 'No data found in the sheet.' });
      }

      // Convert the sheet data into JSON format
      const headers = data[0]; // First row contains headers
      const rows = data.slice(1); // Remaining rows contain data

      const admissionsData = rows.map((row) => {
        const obj = {};
        headers.forEach((header, index) => {
          obj[header] = row[index] || ''; // Map each header to its corresponding row value
        });
        return obj;
      });

      // Send the fetched data as the response
      return res.status(200).json({ data: admissionsData });
    } catch (error) {
      console.error('Error fetching data from Google Sheets:', error);
      return res.status(500).json({ error: 'Failed to fetch data. Please try again.' });
    }
  } else {
    // Handle any other HTTP methods
    res.status(405).json({ message: 'Method Not Allowed' });
  }
}-e 


File: ./src/pages/api/storePayment.js
===================
import { google } from 'googleapis';
import { JWT } from 'google-auth-library';

const auth = new JWT({
  email: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL,
  key: process.env.NEXT_PUBLIC_GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets({ version: 'v4', auth });

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    const {
      customer_name,
      registration_id,
      customer_phone,
      order_id,
      payment_id,
      payment_method,
      base_amount,
      gateway_charges,
      tax_on_gateway,
      amount_paid,
      courses,
      student_count,
      discount = 0
    } = req.body;

    const spreadsheetId = process.env.NEXT_PUBLIC_GOOGLE_SHEET_ID;

    // Prepare the new row data
    const newRow = [
      new Date().toISOString(),
      customer_name,
      registration_id,
      customer_phone,
      order_id,
      payment_id,
      payment_method,
      base_amount,
      discount,
      gateway_charges,
      tax_on_gateway,
      amount_paid,
      student_count,
      courses.map(c => {
        const [name, days] = c.split(' (');
        return `${name} - ${days.replace(')', '')}`;
      }).join('; ')
    ];

    // Get sheet metadata to find the sheet ID
    const { data: { sheets: sheetList } } = await sheets.spreadsheets.get({
      spreadsheetId,
      fields: 'sheets(properties(sheetId,title))'
    });

    const paymentSheet = sheetList.find(s => s.properties.title === 'payments');
    if (!paymentSheet) {
      throw new Error('Payments sheet not found');
    }

    // Batch update request
    const requests = [
      // Insert new row at row 2 (below headers)
      {
        insertDimension: {
          range: {
            sheetId: paymentSheet.properties.sheetId,
            dimension: 'ROWS',
            startIndex: 1, // Row 2 (0-based)
            endIndex: 2
          },
          inheritFromBefore: false
        }
      },
      // Add new data to the inserted row
      {
        updateCells: {
          range: {
            sheetId: paymentSheet.properties.sheetId,
            startRowIndex: 1,
            endRowIndex: 2,
            startColumnIndex: 0,
            endColumnIndex: newRow.length
          },
          rows: [{
            values: newRow.map(value => ({
              userEnteredValue: typeof value === 'number' 
                ? { numberValue: value } 
                : { stringValue: value.toString() }
            }))
          }],
          fields: 'userEnteredValue'
        }
      }
    ];

    // Execute batch update
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId,
      resource: { requests }
    });

    return res.status(200).json({ 
      success: true,
      message: 'Payment stored successfully at the top'
    });

  } catch (error) {
    console.error('Error storing payment:', error);
    return res.status(500).json({ 
      success: false,
      error: 'Failed to store payment',
      details: error.message 
    });
  }
}-e 


File: ./src/pages/api/createOrder.js
===================
import Razorpay from 'razorpay';

const razorpay = new Razorpay({
  key_id: process.env.NEXT_PUBLIC_RAZORPAY_ID,
  key_secret: process.env.RAZORPAY_SECRET,
});

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { amount, currency, receipt } = req.body;

    try {
      const order = await razorpay.orders.create({
        amount,
        currency,
        receipt,
      });

      res.status(200).json(order);
    } catch (error) {
      console.error('Error creating Razorpay order:', error);
      res.status(500).json({ error: 'Failed to create order' });
    }
  } else {
    res.status(405).json({ message: 'Method Not Allowed' });
  }
}-e 


File: ./src/pages/payment.jsx
===================
"use client"

import { useState, useEffect, useCallback, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"
import Script from "next/script"
import Head from "next/head"
import BackButton from "@/components/ui/back-button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import DoodleBackground from "@/components/ui/doodle-background"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Table, TableBody, TableCell, TableHeader, TableRow } from "@/components/ui/table"
import {
  ChevronLeft,
  Plus,
  Minus,
  Check,
  ArrowRight,
  CreditCard,
  Music,
  Mic,
  Piano,
  Guitar,
  Headphones,
} from "lucide-react"
import { cn } from "@/lib/utils"
import "../app/globals.css"

export default function PaymentPage() {
  const [currentStep, setCurrentStep] = useState(0)
  const [studentNames, setStudentNames] = useState([""])
  const [registrationId, setRegistrationId] = useState("")
  const [customerPhone, setCustomerPhone] = useState("")
  const [selectedCourses, setSelectedCourses] = useState([])
  const [baseAmount, setBaseAmount] = useState(0)
  const [gatewayCharges, setGatewayCharges] = useState(0)
  const [taxOnGateway, setTaxOnGateway] = useState(0)
  const [totalAmount, setTotalAmount] = useState(0)
  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false)
  const [errors, setErrors] = useState({})
  const [direction, setDirection] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [paymentMethod, setPaymentMethod] = useState("card")
  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false)
  const [isHeadingVisible, setIsHeadingVisible] = useState(false)
  const [isLineVisible, setIsLineVisible] = useState(false)
  const containerRef = useRef(null);
  const [hasInitialized, setHasInitialized] = useState(false);
  const [discount, setDiscount] = useState(0)

  const COURSE_PRICING = {
    1: Number.parseInt(process.env.NEXT_PUBLIC_COURSE_PRICE_1DAY) || 1500,
    2: Number.parseInt(process.env.NEXT_PUBLIC_COURSE_PRICE_2DAYS) || 2500,
    3: Number.parseInt(process.env.NEXT_PUBLIC_COURSE_PRICE_3DAYS) || 3500,
  }

  const courses = [
    "Piano",
    "Keyboard",
    "Guitar",
    "Violin",
    "Drums",
    "Recorder",
    "Ukulele",
    "Classical Vocals",
    "Western Vocals",
    "Dance",
  ]

  const validateCustomerDetails = () => {
    const newErrors = {}
  
    // Validate each student name
    studentNames.forEach((name, index) => {
      if (!name.trim()) {
        newErrors[`studentName-${index}`] = "Student name is required"
      }
    })
  
    // Updated regex to match 3-4 digits only
    const idRegex = /^[0-9]{3,4}$/
    if (!registrationId.trim()) {
      newErrors.registrationId = "Registration ID is required"
    } else if (!idRegex.test(registrationId)) {
      newErrors.registrationId = "Registration ID must be 3 or 4 digits"
    }
  
    const phoneRegex = /^[0-9]{10}$/
    if (!customerPhone.trim()) {
      newErrors.customerPhone = "Phone number is required"
    } else if (!phoneRegex.test(customerPhone)) {
      newErrors.customerPhone = "Phone number must be 10 digits"
    }
  
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const validateCourseSelection = () => {
    if (selectedCourses.length === 0) {
      setErrors((prev) => ({ ...prev, courses: "Please select at least one course" }))
      return false
    }
    return true
  }

  const calculateAmounts = useCallback(() => {
  const calculatedBase = selectedCourses.reduce((total, course) => {
    return total + (COURSE_PRICING[course.daysPerWeek] || 0)
  }, 0)

  // Check if any course has more than 1 day per week
  const shouldApplyDiscount = selectedCourses.some(course => course.daysPerWeek > 1)
  const calculatedDiscount = shouldApplyDiscount ? 500 : 0

  const calculatedGateway = (calculatedBase - calculatedDiscount) * 0.02
  const calculatedTax = calculatedGateway * 0.18
  const calculatedTotal = (calculatedBase - calculatedDiscount) + calculatedGateway + calculatedTax

  setBaseAmount(calculatedBase)
  setGatewayCharges(calculatedGateway)
  setTaxOnGateway(calculatedTax)
  setTotalAmount(calculatedTotal)
  setDiscount(calculatedDiscount)
}, [selectedCourses])

  useEffect(() => {
    calculateAmounts()
  }, [selectedCourses, calculateAmounts])

  useEffect(() => {
    const timers = [
      setTimeout(() => setIsHeadingVisible(true), 100),
      setTimeout(() => setIsLineVisible(true), 200),
      setTimeout(() => setIsBackButtonVisible(true), 300),
    ]
    return () => timers.forEach((timer) => clearTimeout(timer))
  }, [])

  useEffect(() => {
    if (hasInitialized && containerRef.current) {
      containerRef.current.scrollIntoView({ behavior: 'smooth' });
    } else {
      setHasInitialized(true);
    }
  }, [currentStep]);

  const handleNextStep = () => {
    if (currentStep === 0 && validateCustomerDetails()) {
      setDirection(1)
      setCurrentStep(1)
    } else if (currentStep === 1 && validateCourseSelection()) {
      setDirection(1)
      setCurrentStep(2)
    }
  }

  const handlePreviousStep = () => {
    if (currentStep > 0) {
      setDirection(-1)
      setCurrentStep(currentStep - 1)
    }
  }

  const handleCourseSelection = (courseName) => {
    setSelectedCourses((prev) => {
      const existingCourse = prev.find((c) => c.name === courseName)
      return existingCourse
        ? prev.filter((c) => c.name !== courseName)
        : [...prev, { name: courseName, daysPerWeek: 1 }]
    })
  }

  const updateCourseDays = (courseName, days) => {
    setSelectedCourses((prev) =>
      prev.map((course) => (course.name === courseName ? { ...course, daysPerWeek: days } : course)),
    )
  }

  const addStudentField = () => {
    setStudentNames((prev) => [...prev, ""])
  }

  const updateStudentName = (index, value) => {
    setStudentNames((prev) => {
      const newNames = [...prev]
      newNames[index] = value
      return newNames
    })
  }

  const removeStudentField = (index) => {
    if (studentNames.length > 1) {
      setStudentNames((prev) => prev.filter((_, i) => i !== index))
    }
  }

  const handlePayment = async () => {
    if (studentNames.some((name) => !name.trim())) {
      alert("Please fill in all student names")
      return
    }
    if (!registrationId) {
      alert("Please fill in registration ID")
      return
    }
    if (!customerPhone) {
      alert("Please fill in phone number")
      return
    }
    if (selectedCourses.length === 0) {
      alert("Please select at least one course")
      return
    }

    setIsLoading(true)

    const orderData = {
      amount: Math.round(totalAmount * 100),
      currency: "INR",
      receipt: `order_${Date.now()}`,
    }

    try {
      const response = await fetch("/api/createOrder", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(orderData),
      })

      const order = await response.json()

      if (!order.id) {
        alert("Failed to create order. Please try again.")
        setIsLoading(false)
        return
      }

      const options = {
        key: process.env.NEXT_PUBLIC_RAZORPAY_ID,
        amount: order.amount,
        currency: order.currency,
        name: "Good Shepherd Institute of Music",
        description: "Monthly Tuition Payment",
        order_id: order.id,
        handler: async (response) => {
          const paymentData = {
            customer_name: studentNames.join(", "),
            registration_id: registrationId,
            customer_phone: customerPhone,
            order_id: order.id,
            payment_id: response.razorpay_payment_id,
            payment_method: "Razorpay",
            base_amount: baseAmount,
            gateway_charges: gatewayCharges,
            tax_on_gateway: taxOnGateway,
            amount_paid: totalAmount,
            courses: selectedCourses.map((c) => `${c.name} (${c.daysPerWeek} days/week)`).join(", "),
            student_count: studentNames.length,
            discount: discount
          }

          const storeResponse = await fetch("/api/storePayment", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(paymentData),
          })

          setIsLoading(false)

          if (storeResponse.ok) {
            setIsPaymentDialogOpen(true)
          } else {
            alert("Payment successful, but failed to store details. Please contact support.")
          }
        },
        prefill: {
          name: studentNames[0], // Use first student name as primary contact
          contact: customerPhone,
        },
        theme: {
          color: "#000000",
        },
      }

      const rzp = new window.Razorpay(options)
      rzp.open()
    } catch (error) {
      console.error("Payment error:", error)
      alert("An error occurred during payment processing. Please try again.")
      setIsLoading(false)
    }
  }

  const pageVariants = {
    initial: (direction) => ({
      opacity: 0,
      x: direction > 0 ? "5%" : "-5%",
      scale: 0.98,
    }),
    in: {
      opacity: 1,
      x: 0,
      scale: 1,
    },
    out: (direction) => ({
      opacity: 0,
      x: direction > 0 ? "-5%" : "5%",
      scale: 0.98,
    }),
  }

  const pageTransition = {
    type: "spring",
    stiffness: 300,
    damping: 30,
  }

  const fadeInUp = {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
    transition: { duration: 0.3 },
  }

  const staggerContainer = {
    animate: {
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const progressBarWidth = () => {
    if (currentStep === 0) return "33.3%"
    if (currentStep === 1) return "66.6%"
    return "100%"
  }

  return (
    <>
      <Head>
        <title>Payments - GSIM</title>
        <meta name="description" content="Enroll in music courses and make payments" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col min-h-screen">
        <div className="bg-black w-full overflow-x-hidden relative">
          <div className="container mx-auto px-4 py-8 flex flex-col relative z-10">
            <div className="relative -ml-2 sm:ml-0"> {/* Adjust container positioning */}
              {/* Back Button - precisely positioned */}
              <div className={`absolute left-0 top-1 transition-opacity duration-500 ${
                isBackButtonVisible ? "opacity-100" : "opacity-0"
              }`}>
                <BackButton className="h-8 w-8 sm:h-10 sm:w-10" /> {/* Fixed button size */}
              </div>
              
              {/* Heading - perfectly left-aligned as original */}
              <h2
                className={`text-4xl md:text-5xl xl:text-7xl font-thin text-white transition-opacity duration-500 ${
                  isHeadingVisible ? "opacity-100" : "opacity-0"
                } pl-12 sm:pl-14`}
              >
                PAYMENT
              </h2>
            </div>
          </div>
        </div>
        <div className="bg-[#f5f5f7]  w-full overflow-x-hidden relative flex-grow" ref={containerRef}>
            {/* Animated doodle background */}
            <DoodleBackground />

            <div className="container mx-auto px-4 py-8 flex flex-col relative z-10">
            <div className="mb-6 relative px-4 sm:px-0">
                <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2, duration: 0.5 }}
                className="flex items-center justify-between"
                >
                <button
                    onClick={handlePreviousStep}
                    className={`text-[#0066cc] font-medium flex items-center ${currentStep === 0 ? "invisible" : "visible"}`}
                >
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Back
                </button>

                <div className="text-sm text-gray-500">Step {currentStep + 1} of 3</div>
                </motion.div>

                <motion.div
                initial={{ opacity: 0, scaleX: 0 }}
                animate={{ opacity: 1, scaleX: 1 }}
                transition={{ delay: 0.3, duration: 0.5 }}
                className="h-1 bg-gray-200 rounded-full mt-4 mb-8 overflow-hidden"
                >
                <motion.div
                    className="h-full bg-[#0066cc] rounded-full"
                    initial={{ width: "0%" }}
                    animate={{ width: progressBarWidth() }}
                    transition={{ duration: 0.5 }}
                />
                </motion.div>

                <motion.h2
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4, duration: 0.5 }}
                className="text-3xl md:text-4xl font-medium mb-6 text-[#1d1d1f] text-center font-thin"
                >
                {currentStep === 0 ? "STUDENT INFORMATION" : currentStep === 1 ? "COURSES SELECTION" : "PAYMENT SUMMARY"}
                </motion.h2>
            </div>

            <div className="flex-grow relative z-20">
                <AnimatePresence mode="wait" custom={direction}>
                {currentStep === 0 && (
                    <motion.div
                    key="step-0"
                    custom={direction}
                    initial="initial"
                    animate="in"
                    exit="out"
                    variants={pageVariants}
                    transition={pageTransition}
                    className="max-w-xl mx-auto"
                    >
                    <Card className="border-none shadow-lg rounded-2xl overflow-hidden backdrop-blur-sm bg-white/90">
                        <CardContent className="p-8 space-y-6">
                        <motion.div variants={staggerContainer} initial="initial" animate="animate" className="space-y-6">
                            {studentNames.map((name, index) => (
                            <motion.div key={index} variants={fadeInUp} className="space-y-2 relative">
                                <Label className="text-[#1d1d1f] font-medium">
                                {index === 0 ? "Student Name" : `Student ${index + 1} Name`}
                                </Label>
                                <div className="flex items-center gap-3">
                                <Input
                                    placeholder="Enter student full name"
                                    value={name}
                                    onChange={(e) => updateStudentName(index, e.target.value)}
                                    className={cn(
                                    "flex-1 h-12 rounded-xl border-gray-300 focus:border-[#0066cc] focus:ring-[#0066cc] transition-all duration-200",
                                    errors[`studentName-${index}`]
                                        ? "border-red-500 focus:border-red-500 focus:ring-red-500"
                                        : "",
                                    )}
                                />
                                {index === studentNames.length - 1 && (
                                    <Button
                                    type="button"
                                    variant="outline"
                                    size="icon"
                                    onClick={addStudentField}
                                    className="h-12 w-12 rounded-full border-gray-300 hover:bg-[#0066cc] hover:text-white hover:border-[#0066cc] transition-all duration-200"
                                    >
                                    <Plus className="h-5 w-5" />
                                    </Button>
                                )}
                                {index > 0 && (
                                    <Button
                                    type="button"
                                    variant="outline"
                                    size="icon"
                                    onClick={() => removeStudentField(index)}
                                    className="h-12 w-12 rounded-full border-gray-300 hover:bg-red-500 hover:text-white hover:border-red-500 transition-all duration-200"
                                    >
                                    <Minus className="h-5 w-5" />
                                    </Button>
                                )}
                                </div>
                                {errors[`studentName-${index}`] && (
                                <motion.p
                                    initial={{ opacity: 0, height: 0 }}
                                    animate={{ opacity: 1, height: "auto" }}
                                    exit={{ opacity: 0, height: 0 }}
                                    className="text-red-500 text-sm mt-1"
                                >
                                    {errors[`studentName-${index}`]}
                                </motion.p>
                                )}
                            </motion.div>
                            ))}

                            <motion.div variants={fadeInUp} className="space-y-2">
                            <Label className="text-[#1d1d1f] font-medium">Registration ID</Label>
                            <Input
                                placeholder="Enter your registration ID"
                                value={registrationId}
                                onChange={(e) => setRegistrationId(e.target.value)}
                                className={cn(
                                "h-12 rounded-xl border-gray-300 focus:border-[#0066cc] focus:ring-[#0066cc] transition-all duration-200",
                                errors.registrationId ? "border-red-500 focus:border-red-500 focus:ring-red-500" : "",
                                )}
                            />
                            {errors.registrationId && (
                                <motion.p
                                initial={{ opacity: 0, height: 0 }}
                                animate={{ opacity: 1, height: "auto" }}
                                exit={{ opacity: 0, height: 0 }}
                                className="text-red-500 text-sm mt-1"
                                >
                                {errors.registrationId}
                                </motion.p>
                            )}
                            </motion.div>

                            <motion.div variants={fadeInUp} className="space-y-2">
                            <Label className="text-[#1d1d1f] font-medium">Phone Number</Label>
                            <Input
                                type="tel"
                                placeholder="Enter phone number"
                                value={customerPhone}
                                onChange={(e) => setCustomerPhone(e.target.value)}
                                className={cn(
                                "h-12 rounded-xl border-gray-300 focus:border-[#0066cc] focus:ring-[#0066cc] transition-all duration-200",
                                errors.customerPhone ? "border-red-500 focus:border-red-500 focus:ring-red-500" : "",
                                )}
                            />
                            {errors.customerPhone && (
                                <motion.p
                                initial={{ opacity: 0, height: 0 }}
                                animate={{ opacity: 1, height: "auto" }}
                                exit={{ opacity: 0, height: 0 }}
                                className="text-red-500 text-sm mt-1"
                                >
                                {errors.customerPhone}
                                </motion.p>
                            )}
                            </motion.div>
                        </motion.div>

                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.6, duration: 0.5 }}
                        >
                            <Button
                            className="w-full mt-6 h-12 bg-[#0066cc] hover:bg-[#004499] text-white rounded-xl font-medium text-base transition-all duration-200 flex items-center justify-center gap-2"
                            onClick={handleNextStep}
                            >
                            Continue
                            <ArrowRight className="h-4 w-4 ml-1" />
                            </Button>
                        </motion.div>
                        </CardContent>
                    </Card>
                    </motion.div>
                )}

                {currentStep === 1 && (
                    <motion.div
                    key="step-1"
                    custom={direction}
                    initial="initial"
                    animate="in"
                    exit="out"
                    variants={pageVariants}
                    transition={pageTransition}
                    className="max-w-2xl mx-auto"
                    >
                    <Card className="border-none shadow-lg rounded-2xl overflow-hidden backdrop-blur-sm bg-white/90">
                        <CardContent className="p-8">
                        <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            transition={{ duration: 0.5 }}
                            className="mb-6"
                        >
                            <p className="text-sm text-gray-500">
                            Selected for {studentNames.length} student{studentNames.length > 1 ? "s" : ""}:
                            <span className="font-medium text-[#1d1d1f]"> {studentNames.join(", ")}</span>
                            </p>
                        </motion.div>

                        <motion.div variants={staggerContainer} initial="initial" animate="animate" className="space-y-6">
                            <motion.div variants={fadeInUp} className="grid grid-cols-2 gap-4 mb-6">
                            {courses.map((course, index) => (
                                <motion.div
                                key={course}
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: index * 0.05, duration: 0.3 }}
                                className={cn(
                                    "relative flex items-center p-4 rounded-xl border-2 cursor-pointer transition-all duration-200",
                                    selectedCourses.some((c) => c.name === course)
                                    ? "border-[#0066cc] bg-[#f0f7ff]"
                                    : "border-gray-200 hover:border-gray-300",
                                )}
                                onClick={() => handleCourseSelection(course)}
                                >
                                <div
                                    className={cn(
                                    "w-5 h-5 rounded-full border-2 mr-3 flex items-center justify-center transition-all duration-200",
                                    selectedCourses.some((c) => c.name === course)
                                        ? "border-[#0066cc] bg-[#0066cc]"
                                        : "border-gray-300",
                                    )}
                                >
                                    {selectedCourses.some((c) => c.name === course) && (
                                    <Check className="h-3 w-3 text-white" />
                                    )}
                                </div>
                                <span className="font-medium text-[#1d1d1f]">{course}</span>
                                </motion.div>
                            ))}
                            </motion.div>

                            {errors.courses && (
                            <motion.p
                                initial={{ opacity: 0, height: 0 }}
                                animate={{ opacity: 1, height: "auto" }}
                                exit={{ opacity: 0, height: 0 }}
                                className="text-red-500 text-sm mb-4"
                            >
                                {errors.courses}
                            </motion.p>
                            )}

                            <AnimatePresence>
                            {selectedCourses.length > 0 && (
                                <motion.div
                                initial={{ opacity: 0, height: 0 }}
                                animate={{ opacity: 1, height: "auto" }}
                                exit={{ opacity: 0, height: 0 }}
                                transition={{ duration: 0.3 }}
                                className="space-y-4"
                                >
                                <h3 className="font-medium text-lg text-[#1d1d1f]">Selected Courses</h3>
                                {selectedCourses.map((course, index) => (
                                    <motion.div
                                    key={course.name}
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: index * 0.1, duration: 0.3 }}
                                    className="bg-white rounded-xl p-4 border border-gray-200 shadow-sm"
                                    >
                                    <div className="flex items-center justify-between">
                                        <div>
                                        <div className="font-medium text-[#1d1d1f]">{course.name}</div>
                                        <div className="text-sm text-gray-500">Days per week (per student)</div>
                                        </div>
                                        <Select
                                        value={course.daysPerWeek.toString()}
                                        onValueChange={(value) => updateCourseDays(course.name, Number.parseInt(value))}
                                        >
                                        <SelectTrigger className="w-[120px] h-10 rounded-lg border-gray-300">
                                            <SelectValue placeholder="Select days" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {[1, 2, 3].map((days) => (
                                            <SelectItem key={days} value={days.toString()}>
                                                {days} day{days > 1 ? "s" : ""}
                                            </SelectItem>
                                            ))}
                                        </SelectContent>
                                        </Select>
                                    </div>
                                    </motion.div>
                                ))}
                                </motion.div>
                            )}
                            </AnimatePresence>
                        </motion.div>

                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.6, duration: 0.5 }}
                        >
                            <Button
                            className="w-full mt-8 h-12 bg-[#0066cc] hover:bg-[#004499] text-white rounded-xl font-medium text-base transition-all duration-200 flex items-center justify-center gap-2"
                            onClick={handleNextStep}
                            disabled={selectedCourses.length === 0}
                            >
                            Continue to Payment
                            <ArrowRight className="h-4 w-4 ml-1" />
                            </Button>
                        </motion.div>
                        </CardContent>
                    </Card>
                    </motion.div>
                )}

                {currentStep === 2 && (
                    <motion.div
                    key="step-2"
                    custom={direction}
                    initial="initial"
                    animate="in"
                    exit="out"
                    variants={pageVariants}
                    transition={pageTransition}
                    className="max-w-2xl mx-auto"
                    >
                    <Card className="border-none shadow-lg rounded-2xl overflow-hidden backdrop-blur-sm bg-white/90">
                        <CardContent className="p-8">
                        <motion.div variants={staggerContainer} initial="initial" animate="animate" className="space-y-8">
                            <motion.div variants={fadeInUp} className="mb-6">
                            <h3 className="font-medium text-lg text-[#1d1d1f] mb-3">Student Details</h3>
                            <div className="bg-[#f5f5f7] rounded-xl p-4 space-y-2">
                                <p className="flex justify-between">
                                <span className="text-gray-500">Students:</span>
                                <span className="font-medium text-[#1d1d1f]">{studentNames.join(", ")}</span>
                                </p>
                                <p className="flex justify-between">
                                <span className="text-gray-500">Registration ID:</span>
                                <span className="font-medium text-[#1d1d1f]">{registrationId}</span>
                                </p>
                                <p className="flex justify-between">
                                <span className="text-gray-500">Parent Phone:</span>
                                <span className="font-medium text-[#1d1d1f]">{customerPhone}</span>
                                </p>
                            </div>
                            </motion.div>

                            <motion.div variants={fadeInUp}>
                            <h3 className="font-medium text-lg text-[#1d1d1f] mb-3">Selected Courses</h3>
                            <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">
                                <Table>
                                <TableHeader>
                                    <TableRow>
                                    <TableCell className="font-medium text-[#1d1d1f]">Course</TableCell>
                                    <TableCell className="text-right font-medium text-[#1d1d1f]">Classes/Week</TableCell>
                                    <TableCell className="text-right font-medium text-[#1d1d1f]">
                                        Price (per student)
                                    </TableCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {selectedCourses.map((course, index) => (
                                    <TableRow key={course.name} className={index % 2 === 0 ? "bg-[#f9f9fb]" : ""}>
                                        <TableCell>{course.name}</TableCell>
                                        <TableCell className="text-right">{course.daysPerWeek} days</TableCell>
                                        <TableCell className="text-right">₹{COURSE_PRICING[course.daysPerWeek]}</TableCell>
                                    </TableRow>
                                    ))}
                                </TableBody>
                                </Table>
                            </div>
                            </motion.div>

                            <motion.div variants={fadeInUp}>
                            <h3 className="font-medium text-lg text-[#1d1d1f] mb-3">Payment Method</h3>
                            <div className="grid grid-cols-2 gap-4 mb-4">
                                <div
                                className={cn(
                                    "relative flex items-center p-4 rounded-xl border-2 cursor-pointer transition-all duration-200",
                                    paymentMethod === "card"
                                    ? "border-[#0066cc] bg-[#f0f7ff]"
                                    : "border-gray-200 hover:border-gray-300",
                                )}
                                onClick={() => setPaymentMethod("card")}
                                >
                                <div
                                    className={cn(
                                    "w-5 h-5 rounded-full border-2 mr-3 flex items-center justify-center transition-all duration-200",
                                    paymentMethod === "card" ? "border-[#0066cc] bg-[#0066cc]" : "border-gray-300",
                                    )}
                                >
                                    {paymentMethod === "card" && <Check className="h-3 w-3 text-white" />}
                                </div>
                                <div className="flex items-center">
                                    <CreditCard className="h-5 w-5 mr-2 text-[#1d1d1f]" />
                                    <span className="font-medium text-[#1d1d1f]">Card</span>
                                </div>
                                </div>

                                <div
                                className={cn(
                                    "relative flex items-center p-4 rounded-xl border-2 cursor-pointer transition-all duration-200",
                                    paymentMethod === "upi"
                                    ? "border-[#0066cc] bg-[#f0f7ff]"
                                    : "border-gray-200 hover:border-gray-300",
                                )}
                                onClick={() => setPaymentMethod("upi")}
                                >
                                <div
                                    className={cn(
                                    "w-5 h-5 rounded-full border-2 mr-3 flex items-center justify-center transition-all duration-200",
                                    paymentMethod === "upi" ? "border-[#0066cc] bg-[#0066cc]" : "border-gray-300",
                                    )}
                                >
                                    {paymentMethod === "upi" && <Check className="h-3 w-3 text-white" />}
                                </div>
                                <div className="flex items-center">
                                    <svg
                                    className="h-5 w-5 mr-2"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                    >
                                    <path
                                        d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
                                        stroke="#1d1d1f"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                    <path
                                        d="M7.5 12H16.5"
                                        stroke="#1d1d1f"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                    <path
                                        d="M12 7.5V16.5"
                                        stroke="#1d1d1f"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                    </svg>
                                    <span className="font-medium text-[#1d1d1f]">UPI</span>
                                </div>
                                </div>
                            </div>
                            </motion.div>

                            <motion.div variants={fadeInUp}>
                              <h3 className="font-medium text-lg text-[#1d1d1f] mb-3">Order Summary</h3>
                              <div className="bg-[#f5f5f7] rounded-xl p-6 space-y-3">
                                <div className="flex justify-between">
                                  <span className="text-gray-500">Number of Students:</span>
                                  <span className="font-medium text-[#1d1d1f]">{studentNames.length}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-500">Base Amount:</span>
                                  <span className="font-medium text-[#1d1d1f]">₹{baseAmount.toFixed(2)}</span>
                                </div>
                                {discount > 0 && (
                                  <>
                                    <div className="flex justify-between">
                                      <span className="text-gray-500">Discount:</span>
                                      <span className="font-medium text-green-600">-₹{discount.toFixed(2)}</span>
                                    </div>
                                    <div className="text-xs text-gray-500 mb-2">
                                      ₹500 discount applied for selecting multiple days per week courses
                                    </div>
                                  </>
                                )}
                                <div className="flex justify-between">
                                  <span className="text-gray-500">Gateway Charges (2%):</span>
                                  <span className="font-medium text-[#1d1d1f]">₹{gatewayCharges.toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-500">Tax on Gateway (18%):</span>
                                  <span className="font-medium text-[#1d1d1f]">₹{taxOnGateway.toFixed(2)}</span>
                                </div>
                                <Separator className="my-3 bg-gray-300" />
                                <div className="flex justify-between text-lg">
                                  <span className="font-medium text-[#1d1d1f]">Total Amount</span>
                                  <span className="font-bold text-[#0066cc]">₹{totalAmount.toFixed(2)}</span>
                                </div>
                              </div>
                            </motion.div>
                        </motion.div>

                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.6, duration: 0.5 }}
                        >
                            <Button
                            className="w-full mt-8 h-12 bg-[#0066cc] hover:bg-[#004499] text-white rounded-xl font-medium text-base transition-all duration-200 flex items-center justify-center gap-2"
                            onClick={handlePayment}
                            disabled={isLoading}
                            >
                            {isLoading ? (
                                <>
                                <svg
                                    className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                >
                                    <circle
                                    className="opacity-25"
                                    cx="12"
                                    cy="12"
                                    r="10"
                                    stroke="currentColor"
                                    strokeWidth="4"
                                    ></circle>
                                    <path
                                    className="opacity-75"
                                    fill="currentColor"
                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                    ></path>
                                </svg>
                                Processing...
                                </>
                            ) : (
                                <>
                                Pay ₹{totalAmount.toFixed(2)}
                                <ArrowRight className="h-4 w-4 ml-1" />
                                </>
                            )}
                            </Button>
                        </motion.div>
                        </CardContent>
                    </Card>
                    </motion.div>
                )}
                </AnimatePresence>
            </div>
            </div>
        </div>
      </div>

      <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>
        <DialogContent className="sm:max-w-md rounded-2xl p-0 overflow-hidden">
          <div className="bg-[#0066cc] p-6 flex justify-center">
            <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center">
              <Check className="h-8 w-8 text-[#0066cc]" />
            </div>
          </div>
          <DialogHeader className="px-6 pt-6">
            <DialogTitle className="text-2xl font-medium text-center">Payment Successful</DialogTitle>
            <DialogDescription className="text-center mt-2">
              Your tuition payment for {studentNames.length} student{studentNames.length > 1 ? "s" : ""} has been
              confirmed.
            </DialogDescription>
          </DialogHeader>
          <div className="p-6">
            <div className="bg-[#f5f5f7] rounded-xl p-4 mb-6">
              <div className="flex justify-between mb-2">
                <span className="text-gray-500">Amount Paid:</span>
                <span className="font-bold text-[#1d1d1f]">₹{totalAmount.toFixed(2)}</span>
              </div>
              {discount > 0 && (
                <div className="flex justify-between mb-2">
                  <span className="text-gray-500">Discount Applied:</span>
                  <span className="font-medium text-green-600">₹{discount.toFixed(2)}</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-gray-500">Payment ID:</span>
                <span className="font-medium text-[#1d1d1f]">RZPY12345678</span>
              </div>
            </div>
            <Button
              className="w-full h-12 bg-[#0066cc] hover:bg-[#004499] text-white rounded-xl font-medium text-base transition-all duration-200"
              onClick={() => setIsPaymentDialogOpen(false)}
            >
              Done
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <Script src="https://checkout.razorpay.com/v1/checkout.js" strategy="afterInteractive" />
    </>
  )
}

-e 


File: ./src/pages/contact-us.jsx
===================
// src/components/ContactUs.jsx

import "../app/globals.css";

export default function ContactUs() {
    return (
        <div className="flex flex-col items-center justify-center px-4">
            <h1 className="text-4xl font-bold mb-4">Contact Us</h1>
            <p className="text-gray-600 text-lg mb-2">
                For any inquiries or feedback, please contact us at:
            </p>
            <p className="text-gray-600 text-lg mb-2">
                Email: <a href="mailto:goodshepherdim@gmail.com">goodshepherdim@gmail.com</a>
            </p>
            <p className="text-gray-600 text-lg mb-4">
                Phone: <a href="tel:+919884556997">+91 98845 56997</a>
            </p>
        </div>
    );
}
-e 


